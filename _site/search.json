[
  {
    "objectID": "profiles/profiles.html",
    "href": "profiles/profiles.html",
    "title": "Learner Profiles{{< include learner-profiles.md >}}",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View\n                \n                      \n            \n          \n          \n        \n        \n          \n            \n              \n              Menu\n            \n            \n              \n            \n            \n              Git & GitHub Working Practices\n            \n            \n              \n            \n            \n              \n                \n                  \n                    Git & GitHub Working Practices\n                  \n                \n                \n                \n                  \n                  Setup\n                \n                        \n                  Key Points\n                \n                \n                  Glossary\n                \n                \n                  Learner Profiles\n                \n                                  \n                    \n                      More \n                    \n                    \n                      \n\n                      Git Cheatsheets for Quick Reference\n                      Discussion\n                      FCM vs Git Cheat Sheet            \n                  \n                      \n            \n            \n            \n            \n              \n                \n                \n              \n              \n                \n              \n            \n          \n        \n\n        \n          Git & GitHub Working Practices\n        \n\n        \n          \n            0%\n          \n          \n            \n            \n          \n            \n      \n        \n          \n            \n              \n                \n              \n              \n                \n                  \n                    \n                      \n                        \n                          \n                        \n                        Toggle Theme\n                      \n                      \n                        \n                          \n                            \n                              \n                            \n                            Light\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Dark\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Auto\n                            \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                                            \n                            \n                               Learner View\n                            \n                          \n                          \n                            \n                              Instructor View\n                            \n                          \n                                          \n                      \n                    \n                  \n                  \n                  \n                \n\n                \n                  \n\n                    \n                      ../EPISODES\n                    \n                    \n\n                      \n                        \n\n                                \n                                  \n                                    \n                                      Summary and Setup\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      1. Repository Access\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      2. Issues\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      3. Branching Models\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      4. Feature Branch Model\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      5. Review\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      6. Break\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      7. Forks\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      8. Conflicts\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      9. History\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      10. End\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      11. 'Rebasing'\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      12. 'Pre-commit'\n                                    \n                                  \n                                              \n                    \n                  \n                \n                \n\n                \n                          \n                    \n                      \n                        \n                          RESOURCES\n                        \n                      \n                      \n                        \n                          \n                            \n                            \n                              \n                              Setup\n                            \n                                                \n                              Key Points\n                            \n                            \n                              Glossary\n                            \n                            \n                              Learner Profiles\n                            \n                                                \n                          \n                        \n                      \n                    \n                  \n                  \n                  \n                  \n                  \n\n                  \n                              \n                \n              \n            \n          \n                                        \n                      Learner Profiles{{&lt; include learner-profiles.md &gt;}}\n                      \n                      \n                      \n      \n      \t\t\n      \t\t\t\n      \t\t\t\n              This lesson is subject to the &lt;(Code of Conduct)&gt;\n              Edit on GitHub\n              | Contributing\n              | Source\n      \t\t\t\tCite | Contact | About\n      \t\t\t\n      \t\t\t\n                      Materials licensed under &lt;({license})&gt; by the authors\n                      Template licensed under &lt;(CC-BY 4.0)&gt; by {template_authors}\n              Built with Quarto"
  },
  {
    "objectID": "instructors/instructor-notes.html",
    "href": "instructors/instructor-notes.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View"
  },
  {
    "objectID": "instructors/instructor-notes.html#general-notes",
    "href": "instructors/instructor-notes.html#general-notes",
    "title": "Git & GitHub Working Practices",
    "section": "General Notes",
    "text": "General Notes\n                      General notes for each section are below:\n                      \n                      Setup\n                      Below are setup steps instructors need to complete before the workshop.\n                      \n                      GitHub Usernames\n                      You should collect GitHub usernames from learners beforehand either using the sign-up form or by emailing learners separately the week before. Sort the learners into pairs before the workshop. They need to be in pairs to review each others PRs in Episode 5 Review.\n                      In Episode 1 you will demonstrate how to give access to a repository by adding these users to the git-training-demo repository. If there are many external learners from partner institutions you may wish to give some learners write access to the git-training-demo repository before the lesson to save time.\n                      \n                      \n                      \n                      git-training-demo Repository\n                      \n                      \n                      \n                      \n                      \n                      \n                      Met Office\n                      \n                      \n                      \n                      Met Office instructors will find that the git-training-demo repository has already been set up for you. If for any reason you need to create a new repository you can do so by creating a new repository from the git-training-demo-template template repository (you will still need to setup the rule in step 8 below), or by following all the steps below.\n                      \n                      \n                      To setup the repository for this lesson you will need to create the git-training-demo repository using the zipped directory we provide.\n                      \n                      Download the zipped directory.\n                      Unzip the directory on your system.\n                      Edit the CITATION.cff file so the GitHub repository url is correct for your organisation.\n                      Initialise the git repository locally.\n                      Add all files and commit.\n                      Create an empty GitHub repo with the name git-training-demo.\n                      Link your local repo to the remote and push all changes.\n                      Setup a rule to require a PR before merging with main. Allow admins to bypass this rule.\n                      \n                      The last step is to create a new milestone on the repository with the name: Git & GitHub WP INSERT_DATE.\n                      \n                      \n                      GitHub Project\n                      \n                      \n                      \n                      \n                      \n                      \n                      Met Office\n                      \n                      \n                      \n                      Met Office instructors will find that the Git & GitHub WP Project has already been setup for them. Instructors just need to ensure that all learners are either in the git-and-github-training Met Office GitHub team or have been given read access if they are external to the organisation.\n                      \n                      \n                      You will need to create a GitHub Project for learners to link Issues they create on the git-training-demo repository to. You can name this Project Git & GitHub WP. Give the git-and-github-training team permissions on the GitHub Project.\n                      \n                      \n                      Introduction\n                      Use the following text as a guide for your intro, show the web notes as you introducing the workshop.\n                      How do you use Git and GitHub to collaborate? This course will guide learners through two common workflows used to collaborate on code with GitHub. It will introduce you to all sorts of neat features like GitHub projects for team management and automatic code review testing. By the end of the workshop you’ll have the knowledge you need to decide which working practices are right for you and your team. Some things we’ll be thinking about:\n                      \n                      Who do I need to give repo access to? How do I do it?\n                      How do you do a full code review on GitHub?\n                      What do all the merge options mean?\n                      Do we merge main (trunk) into our feature branches?\n                      Who presses the merge button?\n                      \n                      At the start of the lesson take some time to:\n                      While you are waiting for everyone post the pre-lesson survey form in the chat. If they haven’t done this they must now.\n                      \n                      Introduce the instructors and the helpers\n                      Describe what it means to be an instructor and a helper, and how they will interact with each other and the learners during the training. This should be agreed by the instructor and the helper before the training. For example, some instructors are more than happy for a helper to jump in if they have something useful to share / if they have forgotten something. The learners should be told about this, so that it doesn’t appear to the learners that the helper is interrupting.\n                      Outline a rough schedule (there is a rough schedule in the instructor view setup page) Or simply state that the morning focuses on Git and the afternoon on GitHub\n                      Remember to take regular breaks\n                      What are the outcomes of the lesson? They are on the Setup page!\n                      How to navigate the material. Where are the git and fcm to git cheatsheets? Learners can do the challenges or the read the Discussion section if they are ahead.\n                      We understand a large amount of the information in this course will likely be new to most of you, so we encourage you to ask questions at any time. Remember, there is no such thing as a stupid question! (remember to let learners know how you want them to ask Qs in-person learners can raise their hands or use green/red sticky notes, online learners can raise their hand)\n                      How to get help with anything related to Git and GitHub after the training (surgeries and support mailbox)\n                      Mention about the feedback form and that any feedback will be used to improve the training\n                      Ensure the material can be read by learners in the room (to change the font size in firefox use View –&gt; Zoom –&gt; Zoom In or &lt;+&gt;)\n                      Ensure learners can hear you well\n                      \n                      \n                      \n                      Repository Access\n                      At the start of this episode you will demonstrate how to give collaborators access to the git-training-demo repository. Give write access to:\n                      \n                      The git-and-github-training team (which will include all Met Office colleagues).\n                      Add partners individually.\n                      \n                      Later on in the workshop before the episode on forking you will reduce learners permissions to triage.\n                      \n                      \n                      Issues\n                      This section is relatively simple - open an Issue to add a file with your favourite cloud.\n                      \n                      Add a milestone, project, and assign yourself to the Issue.\n                      It would be good to have an image of a cloud to drag and drop in the Issue to demonstrate this functionality.\n                      \n                      \n                      \n                      Branching Models\n                      There is nothing in this episode for learners to do so keep it short and snappy.\n                      \n                      Highlight that in the intro lesson learners used the feature branch workflow.\n                      Mention the links at the end of the episode which have much more detail on other models.\n                      \n                      \n                      \n                      Feature Branch Model\n                      Learners will not have cloned a repository before! PR templates and automatically closing PRs are also new. When the PR is opened they should assign the other learner in their pair as the reviewer.\n                      There is a chance their changes fail the PR checks. Point out that they may have failed, show the PR page and see if any have red cross next to them. Explain briefly that we use automated PR checks using pre-commit and there is an optional episode at the end of the lesson on how to use these. You may need to help learners fix their change locally and push a new commit so these checks pass. If you take a 10 minute or longer break at the end of the episode you can help those learners whose tests failed during the break.\n                      \n                      \n                      Review\n                      It’s important that learners make a suggestion on their partners PR, it doesn’t matter what that suggestion is.\n                      The 2 instructors will need to swap part way through this episode.\n                      \n                      Reviewing Changes\n                      In this section the first instructor should review the PR opened by the second instructor.\n                      \n                      \n                      Responding to Review\n                      In this section the second instructor should respond to the review, sharing their screen. They can change their GitHub theme so that the 2 instructors GitHub pages look visually distinct, this makes it clearer whether we are watching the reviewer or the developer.\n                      \n                      \n                      Approving Changes\n                      Swap back to the first instructor so they can approve the changes. Make sure you cover the content in the WHO PRESSES THE MERGE BUTTON? callout. Give learners a break and the opportunity to complete the yellow challenge Local Cleanup.\n                      \n                      \n                      \n                      Break\n                      Remember to take regular breaks.\n                      \n                      \n                      Forks\n                      You can choose here to either change everyone’s permissions down to triage:\n                      \n                      during the break before the episode.\n                      at the start of the episode to remind learners again how to change permissions.\n                      \n                      Please showcase fully, as described in the episode, how to sync your fork via the command line. They will use the handy GitHub button later.\n                      \n                      \n                      Conflicts\n                      The most important thing to remember here is the second instructor MUST have opened a PR just like the learners are doing and merge this after opening (and after learners have updated their main branches and created their feature branches). They can bypass protections and do this while the first instructor is teaching. This generates the citation file conflict the first instructor will point out.\n                      \n                      \n                      History\n                      Users will have covered using git log in the intro lesson. Show learners what the history of the repository looks like now. Then walk through the merge options, keep it short and snappy. There are no learner exercises in this episode, make sure you ask learners what questions they have at the end.\n                      \n                      \n                      End\n                      What questions do the learners still have? If there is time then maybe with a vote decide what to briefly look at:\n                      \n                      Actions\n                      pre-commit\n                      Rebasing"
  },
  {
    "objectID": "instructors/instructor-notes.html#notes-from-within-episodes",
    "href": "instructors/instructor-notes.html#notes-from-within-episodes",
    "title": "Git & GitHub Working Practices",
    "section": "Notes from within Episodes",
    "text": "Notes from within Episodes\n                      The following notes are stored within the episode webpages and are extracted here for completeness:"
  },
  {
    "objectID": "learners/fcm-git_cheat_sheet.html",
    "href": "learners/fcm-git_cheat_sheet.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View"
  },
  {
    "objectID": "learners/fcm-git_cheat_sheet.html#fcm-vs-git",
    "href": "learners/fcm-git_cheat_sheet.html#fcm-vs-git",
    "title": "Git & GitHub Working Practices",
    "section": "FCM vs Git",
    "text": "FCM vs Git\n                      If you are familiar with FCM then this cheat sheet is for you! Adapted from Tomek Trzeciak’s comparison page.\n                      \n                      fcm branch-create BRANCH_NAME (fcm bc)\n                      git checkout -b BRANCH_NAME\n                      This also switches you to the new branch.\n                      git checkout -m -b BRANCH_NAME\n                      Switches you to the new branch and also keeps local changes.\n                      \n                      \n                      fcm branch-create –switch BRANCH_NAME (fcm bc –switch)\n                      git checkout -b BRANCH_NAME main\n                      \n                      \n                      fcm branch-list (fcm bls)\n                      git branch\n                      \n                      \n                      fcm checkout BRANCH_URL WORKING_COPY_PATH\n                      git clone REPO_URL WORKING_COPY_PATH\ncd WORKING_COPY_PATH\ngit checkout BRANCH_NAME\n                      \n                      \n                      fcm switch BRANCH_NAME\n                      git checkout BRANCH_NAME\n                      or the newer command:\n                      git switch BRANCH_NAME\n                      \n                      \n                      fcm status\n                      git status\n                      \n                      \n                      fcm info\n                      git status\n                      \n                      \n                      fcm log\n                      git log\n                      \n                      \n                      fcm merge BRANCH_NAME\n                      git pull REPO BRANCH_NAME\n                      or:\n                      git fetch REPO\ngit merge REPO/BRANCH_NAME\n                      \n                      \n                      fcm conflicts\n                      git mergetool\n                      \n                      \n                      fcm resolve –accept=working FILE\n                      git add FILE\n                      \n                      \n                      fcm revert FILE\n                      git checkout -- FILE\n                      or the newer command:\n                      git restore FILE\n                      \n                      \n                      fcm commit\n                      git add FILE\ngit commit\ngit push\n                      \n                      \n                      fcm update\n                      git pull REPO BRANCH_NAME\n                      If BRANCH_NAME is not specified the default branch will be pulled.\n                      \n                      \n                      fcm branch-delete BRANCH_NAME (fcm brm BRANCH_NAME)\n                      git branch -d BRANCH_NAME"
  },
  {
    "objectID": "episodes/key-points.html",
    "href": "episodes/key-points.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View"
  },
  {
    "objectID": "episodes/key-points.html#repository-access",
    "href": "episodes/key-points.html#repository-access",
    "title": "Git & GitHub Working Practices",
    "section": "Repository Access",
    "text": "Repository Access\n                      \n                      On a repository you own or are an admin on navigate to https://github.com/&lt;organisation&gt;/&lt;repository&gt;/settings/access to control access for collaborators.\n                      You can give individuals or teams access to a repository."
  },
  {
    "objectID": "episodes/key-points.html#issues",
    "href": "episodes/key-points.html#issues",
    "title": "Git & GitHub Working Practices",
    "section": "Issues",
    "text": "Issues\n                      \n                      Issues are used to track and plan work.\n                      Issue templates provide template text for the first comment for new Issues of various types. They can auto-label Issues and encourage collaborators to give plenty of detail."
  },
  {
    "objectID": "episodes/key-points.html#branching-models",
    "href": "episodes/key-points.html#branching-models",
    "title": "Git & GitHub Working Practices",
    "section": "Branching Models",
    "text": "Branching Models\n                      \n                      A clearly communicated branching model helps developers.\n                      For small projects use the Feature Branch flow.\n                      For larger projects or those with external collaborators use forks with feature branches."
  },
  {
    "objectID": "episodes/key-points.html#feature-branch-model",
    "href": "episodes/key-points.html#feature-branch-model",
    "title": "Git & GitHub Working Practices",
    "section": "Feature Branch Model",
    "text": "Feature Branch Model\n                      \n                      Cloning a repository gives you a local copy of the repository: git clone &lt;repository&gt; &lt;directory&gt;\n                      Automatically close Issues when a PR is merged by adding a Closes #&lt;Issue number&gt; line to the first comment in the PR.\n                      Pull Request templates provide template text for the first comment for new Issues of various types, and Pull Requests. They can auto-label Issues and encourage collaborators to give plenty of detail."
  },
  {
    "objectID": "episodes/key-points.html#review",
    "href": "episodes/key-points.html#review",
    "title": "Git & GitHub Working Practices",
    "section": "Review",
    "text": "Review\n                      \n                      A Pull Request (PR) is where your code and science review takes place.\n                      General review comments go in the PR Conversations tab.\n                      View a diff of the changes in the PR Files changed tab.\n                      Make inline comments or suggested changes in the Files changed tab using the diff."
  },
  {
    "objectID": "episodes/key-points.html#break",
    "href": "episodes/key-points.html#break",
    "title": "Git & GitHub Working Practices",
    "section": "Break",
    "text": "Break"
  },
  {
    "objectID": "episodes/key-points.html#forks",
    "href": "episodes/key-points.html#forks",
    "title": "Git & GitHub Working Practices",
    "section": "Forks",
    "text": "Forks\n                      \n                      A fork is a server side, in our case GitHub, copy of the repository.\n                      Forks allow collaborators to contribute to the main repository without being given collaborator access or write permissions."
  },
  {
    "objectID": "episodes/key-points.html#conflicts",
    "href": "episodes/key-points.html#conflicts",
    "title": "Git & GitHub Working Practices",
    "section": "Conflicts",
    "text": "Conflicts\n                      \n                      Conflicts occur when two or more people change the same lines of the same file.\n                      The version control system does not allow people to overwrite each other’s changes blindly, but highlights conflicts so that they can be resolved."
  },
  {
    "objectID": "episodes/key-points.html#history",
    "href": "episodes/key-points.html#history",
    "title": "Git & GitHub Working Practices",
    "section": "History",
    "text": "History\n                      \n                      git log --decorate --oneline --graph lets you visualise your repository history in graph form.\n                      There are three options for merging your feature branch into main.\n                      merge: creates a merge commit and results in a non-linear history unless you first rebase your feature branch.\n                      squash and merge: squashes all your feature branch commits into one merge commit on main. Your history is linear.\n                      rebase: re-writes your git history so that all the feature branch commits are now on main. Your history is linear."
  },
  {
    "objectID": "episodes/key-points.html#end",
    "href": "episodes/key-points.html#end",
    "title": "Git & GitHub Working Practices",
    "section": "End",
    "text": "End"
  },
  {
    "objectID": "episodes/key-points.html#rebasing",
    "href": "episodes/key-points.html#rebasing",
    "title": "Git & GitHub Working Practices",
    "section": "‘Rebasing’",
    "text": "‘Rebasing’\n                      \n                      Rebasing helps keep your git history linear which can be useful when using commands such as git bisect to find the commit that introduced a bug.\n                      Rebasing re-writes your git history. Make a backup of your branch before rebasing. git branch &lt;branch-name&gt;.backup\n                      Use an interactive rebase with the -i flag when you want to tidy your git history.\n                      Use git rebase main to rebase your feature branch onto the HEAD of the main branch.\n                      Always check you have updated your local branch from the remote before rebasing.\n                      Always check before pushing to the remote after rebasing that no new commits were added to the remote as these will be lost, use the --force-with-lease flag with git push to help prevent this.\n                      Use git push --force-with-lease to update the remote branch."
  },
  {
    "objectID": "episodes/key-points.html#pre-commit",
    "href": "episodes/key-points.html#pre-commit",
    "title": "Git & GitHub Working Practices",
    "section": "‘Pre-commit’",
    "text": "‘Pre-commit’\n                      \n                      pre-commit checks help prevent accidental commits to main and provide an extra layer of quality assurance."
  },
  {
    "objectID": "episodes/aio.html",
    "href": "episodes/aio.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View"
  },
  {
    "objectID": "episodes/aio.html#permission-levels",
    "href": "episodes/aio.html#permission-levels",
    "title": "Git & GitHub Working Practices",
    "section": "Permission Levels",
    "text": "Permission Levels\n                      \n                      Personal Repositories\n                      Repositories on personal accounts only have two levels of permissions, the Owner and Collaborators1. To use the branching model in this lesson you would need adding as a collaborator. You can still contribute to a public repository without being added as a collaborator by using the forking model.\n                      \n                      \n                      Organisational Repositories\n                      Repositories in organisations have more levels of permissions2. Team members require at least write access to use the branching model. For all lower levels of access use the forking model.\n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      On a repository you own or are an admin on navigate to https://github.com/&lt;organisation&gt;/&lt;repository&gt;/settings/access to control access for collaborators.\n                      You can give individuals or teams access to a repository.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      What levels of repository permissions are there?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Create an Issue with the correct labels.\n                      Assign yourself to an Issue.\n                      \n                      \n                      \n                      \n                      \n                      \n                      GitHub Issues (tickets) are where you plan and track work. You can assign individuals to Issues and label them with a relevant tag such as bug or enhancement. Before opening a new Issue check whether there is already one open for the feature or bug by using GitHub’s search.\n                      Here’s some advice for writing good Issues:\n                      \n                      Be clear and concise, provide plenty of detail\n                      State the expected outcomes\n                      Tag relevant collaborators\n                      Break up large Issues into several small ones and or use checklists to track tasks in the Issue\n                      \n                      Open an Issue on the git-training-demo repository to add a file stating your favourite cloud type.\n                      Navigate to the Issues tab:\n                      \n                      This repositories Issue tab looks different to the weather repository you worked on in the Introduction to Git & GitHub lesson. It uses Issue templates to provide templates for bugs and feature requests. Click on the green Get started button next to the Feature request option:\n                      \n                      You can see the Issue has text in the description already. This is from the template which provides a consistent structure to the Issues on this repo. The template has also added the enhancement label for you.\n                      Add in a clear title such as “Add mo-fitzroy’s favourite cloud type”, replace ‘mo-fitzroy’ with your GitHub username. Click Submit new issue.\n                      \n                      \n                      \n                        \n                        \n                        Instructor Note\n                        \n                      \n                      \n                      \n                      It’s a good idea to remind learners that images can be dropped straight into the Issue description. An image of a cloud should do!\n                      \n                      \n                      \n                      \n                      \n                      \n                      Projects, milestones, and labels\n                      Your instructor has set up a Project and some custom milestones for you to add to your Issue.\n                      \n                      Labels help you classify Issues and PRs.\n                      Milestones group Issues and PRs, tracking their progress towards a common milestone automatically.\n                      Projects are a tool for planning and tracking work via GitHub. Multiple repositories can be linked to a single project. Projects can have multiple views depending on your needs; some have kanban boards and gantt charts, others separate out an individual colleagues Issues to avoid clutter.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Assign yourself, a project, and a milestone to your Issue\n                      \n                      On the right hand side of the Issue you can:\n                      \n                      Assign yourself to the Issue so that others know you are working on it.\n                      Add the Issue to a Project by clicking on the cog next to the Projects section. (If you don’t see a project related to the training you might not have been granted permissions, ask your instructors for help)\n                      Assign the Issue to a milestone.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      Issues are used to track and plan work.\n                      Issue templates provide template text for the first comment for new Issues of various types. They can auto-label Issues and encourage collaborators to give plenty of detail.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      What information should go on an Issue?\n                      What are Issue templates?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Describe the Feature Branch and Forking models.\n                      \n                      \n                      \n                      \n                      \n                      \n                      In the git-novice lesson you learnt how to develop features on a branch and use a pull-request to merge the changes back into the main branch. You were unknowingly using a Git branching model called feature branch workflow.\n                      As a reminder, we develop on branches to ensure that our development code doesn’t affect the production code on the main branch. Branches also allow your team to develop features in parallel.\n                      A branching model (sometimes also called strategies or workflows) is the model your team adopts when writing, merging and deploying code when using a version control system. It is a set of rules that you must follow which outline how your team and collaborators interact with a shared codebase.\n                      Having a clear model helps avoid merge conflicts, more on that later, and clearly sets out to new collaborators how they can contribute to your repository.\n                      In this and the following episodes, we will outline some of the branching models that teams use in order to organize their work. We will look at their pros and cons and help decide which model you should choose based on your teams needs.\n                      A branching model aims to:\n                      \n                      Enhance productivity by ensuring proper coordination among developers\n                      Enable parallel development\n                      Help organize a series of planned, structured releases\n                      Map a clear path when making changes from development through to production\n                      Maintain a bug-free code where developers can quickly fix issues and get these changes back to production without disrupting the development workflow"
  },
  {
    "objectID": "episodes/aio.html#git-branching-models",
    "href": "episodes/aio.html#git-branching-models",
    "title": "Git & GitHub Working Practices",
    "section": "Git Branching Models",
    "text": "Git Branching Models\n                      Some version control systems are more geared towards certain branching models. When using git you have a wide range of models to pick from. This means the first rule when collaborating using git is: “Talk about your branching model.”\n                      A repository’s CONTRIBUTING file may include details of their branching model. This information might also be in a repository’s README file. If in doubt ask! You can also look at how other people appear to be contributing to the repository.\n                      Below are a few models:\n                      \n                      \n                      Feature Branch\n                      In this model every small change or “feature” gets its own branch where the developers make changes. Once the feature is done, they submit a pull request and merge it into the main branch after review. Feature branches should be relatively short-lived.\n                      \n                      Pros\n                      \n                      Each feature is developed away from main so you don’t affect production code\n                      Multiple features can be developed in parallel feature branches\n                      It’s a simple model that’s easy for those new to git and your project\n                      Easy to set up with continuous integration testing and deployment\n                      \n                      \n                      \n                      Cons\n                      \n                      If you don’t regularly merge changes to main into your feature branch it can become outdated, leading to merge conflicts\n                      You may struggle if you need to maintain multiple production versions simultaneously in the same repository\n                      \n                      The Feature Branch model is sometimes called GitHub Flow.\n                      ---\nconfig:\n  gitGraph:\n    showCommitLabel: false\n---\n    gitGraph\n        accDescr {A git graph showing four branches including the default\n        &lt;code&gt;main&lt;/code&gt; branch.\n        Each circle is a commit.\n        A circle with an outline but no fill colour is a merge commit \n        where one branch has been merged into another.\n        The two feature branches and the &lt;code&gt;bug_fix&lt;/code&gt; branch \n        all branch off of &lt;code&gt;main&lt;/code&gt; at the same commit.\n        The &lt;code&gt;bug_fix&lt;/code&gt; and &lt;code&gt;small_feature&lt;/code&gt; branches\n        are merged back into &lt;code&gt;main&lt;/code&gt; after\n        being developed on their branches.\n        The &lt;code&gt;large_feature&lt;/code&gt; branch merges in the\n        changes to &lt;code&gt;main&lt;/code&gt; to fix any conflicts\n        before the feature is ready to be merged\n        back into the &lt;code&gt;main&lt;/code&gt; branch via a pull request.}\n        commit\n        branch bug_fix\n        checkout main\n        branch small_feature\n        checkout main\n        branch large_feature\n        checkout bug_fix\n        commit\n        checkout large_feature\n        commit\n        checkout main\n        merge bug_fix\n        checkout small_feature\n        commit\n        checkout large_feature\n        commit\n        checkout small_feature\n        commit\n        checkout main\n        merge small_feature\n        checkout large_feature\n        commit\n        merge main\n        checkout main\n        merge large_feature\n                      \n                      \n                      \n                      \n                      Forking\n                      In this model you make a fork (copy) of the whole repository you want to contribute to on GitHub in your personal space. You develop your changes using this fork. When a change is ready you open a pull request to contribute the changes back to the original repository.\n                      \n                      Pros\n                      \n                      Removes the need to give all collaborators adequate permissions on your repository\n                      Only project maintainers can approve new code\n                      You can use any other model within your main repository and forks to develop changes\n                      \n                      \n                      \n                      \n                      \n                      Git Flow\n                      In this model the main development occurs in a develop branch. Feature branches are created from this develop branch. When the develop branch is ready for a release, you create a release branch which is then tested and merged onto the develop and main branches.\n                      \n                      Pros\n                      \n                      There is a clear purpose for each branch\n                      Handles complex projects well\n                      \n                      \n                      \n                      Cons\n                      \n                      Very steep learning curve, not suitable for novices\n                      \n                          gitGraph\n        accDescr {A git graph showing the GitFlow model.}\n        commit tag:\"0.1\"\n        branch hotfix\n        checkout main\n        branch release\n        branch develop\n        checkout hotfix\n        commit\n        checkout develop\n        commit\n        branch small_feature\n        checkout develop\n        merge hotfix\n        branch large_feature\n        checkout small_feature\n        commit\n        checkout large_feature\n        commit\n        commit\n        checkout main\n        merge hotfix tag:\"0.2\"\n        checkout small_feature\n        commit\n        checkout develop\n        merge small_feature\n        checkout release\n        merge develop\n        checkout large_feature\n        commit\n        checkout release\n        commit\n        commit\n        checkout main\n        merge release tag:\"1.0\"\n        checkout develop\n        merge release"
  },
  {
    "objectID": "episodes/aio.html#recommendations",
    "href": "episodes/aio.html#recommendations",
    "title": "Git & GitHub Working Practices",
    "section": "Recommendations",
    "text": "Recommendations\n                      For small projects using a Feature Branch model is normally sufficient. If your team is large, or you expect external collaborators to contribute then we recommend developing using forks. Most open source projects require you to submit new code using a fork. The next few episodes will guide you through examples of both models.\n                      This wasn’t an exhaustive list of branching models! You can find more information using the links below:\n                      \n                      From Novice to Pro: Understanding Git Branching Strategies, GitProtect\n                      What is a Git workflow?, GitLab\n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      A clearly communicated branching model helps developers.\n                      For small projects use the Feature Branch flow.\n                      For larger projects or those with external collaborators use forks with feature branches.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      Which branching model is best for me?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Use the feature branch model to collaborate.\n                      Clone a remote repository.\n                      \n                      \n                      \n                      \n                      \n                      \n                      In this episode we will use the Feature Branch model to contribute to the git-training-demo repository.\n                      You will need to get into pairs so that you can review each others code changes. Your instructor may have already paired you with another learner."
  },
  {
    "objectID": "episodes/aio.html#cloning-a-repository",
    "href": "episodes/aio.html#cloning-a-repository",
    "title": "Git & GitHub Working Practices",
    "section": "Cloning a Repository",
    "text": "Cloning a Repository\n                      You will both need to download a copy of the git-training-demo repository. This is called “cloning a repository”.\n                      $ cd ~/Desktop\n                      $ git clone git@github.com:metoffice/git-training-demo.git\n                      Make sure to navigate to the Desktop folder first."
  },
  {
    "objectID": "episodes/aio.html#feature-branches",
    "href": "episodes/aio.html#feature-branches",
    "title": "Git & GitHub Working Practices",
    "section": "Feature Branches",
    "text": "Feature Branches\n                      You can now make changes to the git-training-demo repository using your clone. We will use a feature branch to develop our change on:\n                      $ cd git-training-demo\n$ git switch -c 1_favourite_cloud\n                      Switched to branch '1_favourite_cloud'\n                      Notice the name of the branch is prefixed by the number 1. This is the Issue number of the Issue you created in Episode 2 Issues. Your team may choose a different naming convention such as prefixing the branch name by feature, bug etc.\n                      Add in a new file cloud-mo-fitzroy.md, replace mo-fitzroy with your username:\n                      $ nano cloud-mo-fitzroy.md\n$ cat cloud-mo-fitzroy.md\n                      # My Favourite Cloud\n\nLight and fluffy cumulus.\n                      Add and commit your changes:\n                      $ git add cloud-mo-fitzroy.md\n$ git commit -m \"Adds Robert Fitzroy's favourite cloud\"\n                      [1_favourite_cloud b7f26e6] Adds Robert Fitzroy's favourite cloud\n 1 file changed, 3 insertions(+)\n create mode 100644 cloud-mo-fitzroy.md\n                      Then push the changes to GitHub:\n                      $ git push\n                      Enumerating objects: 4, done.\nCounting objects: 100% (4/4), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 357 bytes | 178.00 KiB/s, done.\nTotal 3 (delta 1), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nremote: \nremote: Create a pull request for '1_favourite_cloud' on GitHub by visiting:\nremote:      https://github.com/MetOffice/git-training-demo/pull/new/1_favourite_cloud\nremote: \nTo github.com:metoffice/git-training-demo.git\n * [new branch]      1_favourite_cloud -&gt; 1_favourite_cloud\nbranch '1_favourite_cloud' set up to track 'origin/1_favourite_cloud'.\n                      Note that we didn’t have to create a remote called origin: Git uses this name by default when we clone a repository. This is why origin was a sensible choice in the git-novice lesson when we were setting up remotes by hand.\n                      Take a look at the repository on GitHub again, and you should be able to see the 1_favourite_cloud branch. You may need to refresh your browser to see the new branch.\n                      \n                      \n                      \n                        \n                        \n                        fatal: no upstream branch\n                        \n                      \n                      \n                      \n                      If you see a message similar to the following:\n                      fatal: The current branch 1_favourite_cloud has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin 1_favourite_cloud\n\nTo have this happen automatically for branches without a tracking\nupstream, see 'push.autoSetupRemote' in 'git help config'.\n                      You will need to set the name of the upstream GitHub branch using the recommended git push command.\n                      You can get git to automatically set the upstream branch. This avoids having to run git push with the –set-upstream flag the first time you push from a new branch.\n                      Change your git config using:\n                      $ git config --global push.autoSetupRemote true\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                        \n                        \n                        Some more about remotes\n                        \n                      \n                      \n                      \n                      In this episode and in the git-novice lesson, our local repository only had a single “remote”, called origin. A remote is a copy of the repository that is hosted somewhere else, that we can push to and pull from, and there’s no reason that you have to work with only one. For example, on some large projects you might have your own copy in your own GitHub account (you’d probably call this origin) and also the main “upstream” project repository (let’s call this upstream for the sake of examples). You would pull from upstream from time to time to get the latest updates that other people have committed. We will practice using an upstream repository later in the forking model.\n                      Remember that the name you give to a remote only exists locally. It’s an alias that you choose - whether origin, or upstream, or mo-fitzroy - and not something intrinsic to the remote repository.\n                      The git remote family of commands is used to set up and alter the remotes associated with a repository. Here are some of the most useful ones:\n                      \n                      git remote -v lists all the remotes that are configured (we already used this in the last episode)\n                      git remote add [name] [url] is used to add a new remote\n                      git remote remove [name] removes a remote. Note that it doesn’t affect the remote repository at all - it just removes the link to it from the local repo.\n                      git remote set-url [name] [newurl] changes the URL that is associated with the remote. This is useful if it has moved, e.g. to a different GitHub account, or from GitHub to a different hosting service. Or, if we made a typo when adding it!\n                      git remote rename [oldname] [newname] changes the local alias by which a remote is known - its name. For example, one could use this to change upstream to mo-fitzroy."
  },
  {
    "objectID": "episodes/aio.html#open-a-pr",
    "href": "episodes/aio.html#open-a-pr",
    "title": "Git & GitHub Working Practices",
    "section": "Open a PR",
    "text": "Open a PR\n                      In the git-novice lesson you practised opening a pull request.\n                      You should see a notification appear on GitHub telling you the 1_favourite_cloud branch had recent pushes. The Collaborator should click on the green Compare & pull request button to open the PR.\n                      If you don’t see this notification click on the branches dropdown, the button showing main, and click on the 1_favourite_cloud branch.\n                      \n                      You should now see the Code view for the 1_favourite_cloud branch and a Contribute button. Click on the Contribute button and select the green Open pull request option.\n                      \n                      You may have noticed when running git push on the 1_favourite_cloud branch for the first time the output contained:\n                      remote: Create a pull request for '1_favourite_cloud' on GitHub by visiting:\nremote:      https://github.com/MetOffice/git-training-demo/pull/new/1_favourite_cloud\n                      You could have also followed this link to create a new PR. We recommend you always open a draft PR after your first push. This gives you access to a diff of your changes against the target branch (usually main). When the changes are ready for review you can mark the PR as Ready for review."
  },
  {
    "objectID": "episodes/aio.html#pull-request-templates",
    "href": "episodes/aio.html#pull-request-templates",
    "title": "Git & GitHub Working Practices",
    "section": "Pull Request Templates",
    "text": "Pull Request Templates\n                      Notice the description has filled with a template. Just like this repository used Issue templates it also uses a PR template.\n                      This template has a checklist that needs to be completed before opening the PR3. It also has checklists for science and code review. In the description scroll down to the checklists which look like this:\n                      - [ ] I have read `CONTRIBUTING.md` and added my name as a Code Contributor.\n                      Some open source projects require you to add your name to a list of contributors. We will do this later so for now mark the task as complete. Replace the space in the square checkbox brackets with an x to mark the task as complete:\n                      - [x] I have read `CONTRIBUTING.md` and added my name as a Code Contributor.\n                      Now when you open the PR it should look something like this:\n                      \n                      This image shows PR number #8. This PR will close/fix Issue number #7 (the top left arrow). You can request a review on the top right. Some repositories will be set up to automatically assign a reviewer based on how many reviews each team member currently has open4. The bottom arrow shows the checklist items we marked as complete.\n                      At the bottom of your PR you can see that a review is required before merging. All checks have passed, this repository has automatic checks for trailing whitespace, accidentally adding large files etc. More information can be found in the optional episode on pre-commit hooks."
  },
  {
    "objectID": "episodes/aio.html#help-some-checks-have-failed",
    "href": "episodes/aio.html#help-some-checks-have-failed",
    "title": "Git & GitHub Working Practices",
    "section": "Help: Some checks have failed",
    "text": "Help: Some checks have failed\n                      If your now open Pull Request says some checks have failed this is because your changes did not pass the automatic pre-commit checks.\n                      Click on the Details link next to the failed test and fix your code on your local repository. Commit and then push this fix to GitHub. Your PR will automatically update and re-run the tests, you may need to refresh the page."
  },
  {
    "objectID": "episodes/aio.html#reviewing-changes",
    "href": "episodes/aio.html#reviewing-changes",
    "title": "Git & GitHub Working Practices",
    "section": "Reviewing Changes",
    "text": "Reviewing Changes\n                      You can add general science and code review comments in the Conversation tab. To review specific files go to the Files changed tab:\n                      \n                      This tab shows a diff (difference) between your feature branch, 1_favourite_cloud, and the target branch, main. Your diff might look different, to swap between Unified and Split view click on the cog dropdown:\n                      \n                      The default view shows a diff of the source code. We’ll stick with source code diffs for this lesson but you can change the view to rich diffs to display rendered changes to Markdown or Jupyter Notebook files. Click on the file icon on the far right of a diff for the file to swap to a rich diff:\n                      \n                      To start a review you can click on the green Review changes button:\n                      \n                      Normally it is useful to review each file one at a time and make comments inline first before adding general comments. Close the review popup and hover next to a line number until it becomes highlighted. Click on the line to add an inline comment:\n                      \n                      You can make suggested changes using inline comments. Click on the file icon or press Ctrl+g:\n                      \n                      Add in a suggested change for your review. Click on the green Start a review button. Now click on the green button in the top right which says Finish your review or Review Changes, add a comment, and select Request changes. When you’re finished click the green Submit review button.\n                      \n                      The PRs Conversation tab now looks like this:"
  },
  {
    "objectID": "episodes/aio.html#responding-to-review",
    "href": "episodes/aio.html#responding-to-review",
    "title": "Git & GitHub Working Practices",
    "section": "Responding to Review",
    "text": "Responding to Review\n                      Now you will respond to the review on the PR that you opened.\n                      You can see merging is blocked because our reviewer has requested changes. You also have the option to commit the suggested change to your branch directly via the PR. Click on the Commit suggestion button. In the popup add a description then click on Commit changes:\n                      \n                      You could have also committed the suggested changes to your feature branch using your local copy, pushed the changes to GitHub and then marked the conversation with the suggested change as resolved.\n                      Re-request a review by clicking on the two arrows forming a circle next to the reviewers name at the top of the PR."
  },
  {
    "objectID": "episodes/aio.html#help-some-checks-have-failed-1",
    "href": "episodes/aio.html#help-some-checks-have-failed-1",
    "title": "Git & GitHub Working Practices",
    "section": "Help: Some checks have failed",
    "text": "Help: Some checks have failed\n                      Since our PR is running automatic checks it’s best not to make large changes by accepting suggestions this way. Instead make changes to your feature branch using your local copy, run the checks locally, push the changes to GitHub and then mark the conversations with the suggested changes as resolved. You can add a commit hash in the conversation which will automatically link to the commit responding to any review comments."
  },
  {
    "objectID": "episodes/aio.html#approving-changes",
    "href": "episodes/aio.html#approving-changes",
    "title": "Git & GitHub Working Practices",
    "section": "Approving Changes",
    "text": "Approving Changes\n                      Head back to your partners PR, if they re-requested a review you will have received another notification.\n                      The Conversation tab should update to show the suggestion as Outdated because it has been resolved. It also gives you the option to view the new changes since your last review.\n                      \n                      Click on the View changes button. If you are happy that your requested changes have been addressed then you can approve the PR:\n                      \n                      Swap back to the Conversations tab. The PR is now ready to merge and has no conflicts with the base (main in this case) branch. Click Squash and merge; don’t forget to move the PR number to the start of the commit message like you did in the Version Control with Git lesson:\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Who presses the merge button?\n                      \n                      \n                      \n                      In this case both the contributor and reviewer have write access to the repository. This means they can both merge and close the PR and it is up to your team to decide whether the contributor or the reviewer does the merge as part of your working practices.\n                      When using the forking model later the reviewer always merges the PR as the contributor will not have sufficient permissions.\n                      \n                      \n                      When your PR is merged the Conversations tab will show:\n                      \n                      You can now delete the branch from GitHub by pressing the Delete branch button. Some repositories will be automatically set up to delete the feature branch after a PR is successfully merged.\n                      If you head back to the main page of the git-training-demo repository you will see your new file in the code view for the main branch. The commit message for the PR merge is shown next to it. If you hover over the PR number (in this case #2) a popup will appear with details of the merged PR. Click on the number to take you to the closed PR.\n                      \n                      Head over to the repositories Issues tab. Check that your Issue for adding your favourite cloud file was closed when you merged the PR.\n                      \n                      \n                      \n                      \n                      \n                      Local Cleanup\n                      \n                      In the git-novice lesson you learnt how to pull changes and clean up your branches after merging a PR.\n                      You can now:\n                      \n                      Update your local copy of the git-training-demo repository\n                      Delete any branches that are no longer necessary\n                      \n                      \n                      Solution (Solution). \n                      \n                      Update your local copy of the git-training-demo repository\n                      \n                      $ git switch main\n$ git pull\n                      remote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0 (from 0)\nUnpacking objects: 100% (3/3), 1.07 KiB | 20.00 KiB/s, done.\nFrom github.com:metoffice/git-training-demo\n   39720d8..9bdd3b8  main       -&gt; origin/main\nUpdating 39720d8..9bdd3b8\nFast-forward\n cloud-mo-fitzroy.md | 3 +++\n 1 file changed, 3 insertions(+)\n create mode 100644 cloud-mo-fitzroy.md\n                      \n                      Delete any branches that are no longer necessary\n                      \n                      $ git remote prune origin\n                      Pruning origin\nURL: git@github.com:metoffice/git-training-demo.git\n * [pruned] origin/1_favourite_cloud\n                      $ git branch -D 1_favourite_cloud\n                      Deleted branch 1_favourite_cloud (was b7f26e6).\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      A Pull Request (PR) is where your code and science review takes place.\n                      General review comments go in the PR Conversations tab.\n                      View a diff of the changes in the PR Files changed tab.\n                      Make inline comments or suggested changes in the Files changed tab using the diff.\n                      \n                      \n                      \n                      \n                      You’ve now used the Feature Branch model to:\n                      \n                      Open an Issue describing the feature or bug\n                      Clone a repository\n                      Create a branch to develop your changes on\n                      Make changes to your working copy\n                      Open a Pull Request\n                      Respond to review\n                      Update your local copy and tidy up your branches\n                      \n                      sequenceDiagram\n    accDescr {A sequence diagram showing the steps for the branching model.}\n    autonumber\n    participant GHM as origin main\n    participant GHF as origin feature\n    participant M as main\n    GHM --&gt;&gt; GHM: #f\n    Note over GHM: Open an Issue for the change\n    GHM --&gt;&gt; M: #f\n    Note right of GHM: First time: git clone&lt;br/&gt;Then: git pull\n    create participant F as feature\n    M -&gt;&gt; F: Create a feature branch:&lt;br/&gt;git switch -c feature\n    loop\n        F -&gt;&gt; F: #f\n        Note over F: Develop changes:&lt;br/&gt;git add&lt;br/&gt;git commit\n    end\n    F --&gt;&gt; GHF: #f\n    Note left of F: Push to GitHub: git push&lt;br/&gt;The first push creates origin feature!\n    destroy GHF\n    GHF -&gt;&gt; GHM: #f\n    Note left of GHF: Pull Request and then Merge.&lt;br/&gt;Delete origin feature branch.\n    GHM --&gt;&gt; M: #f\n    Note right of GHM: git pull\n    Note over F: Delete branch:&lt;br/&gt;git branch -D feature\n    box GitHub Remote\n    participant GHM\n    participant GHF\n    end\n    box Local\n    participant M\n    participant F\n    end\n                      Take a break - get up and move about.\n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      How do I see a diff of the changes?\n                      How can I make inline comments or suggested changes?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Create a fork of a repository.\n                      Contribute to the upstream repository using the fork.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Most open source projects require new collaborators to contribute via a fork of the repository. A fork is simply a copy of the repository that you make on the server, in our case GitHub, side. This avoids having to give repository permissions to every single collaborator5. You may only have one fork of a repository in your personal space or organisation.\n                      In this episode we will create a fork and contribute a change to the main GitHub repository using the feature branch model we have been practising.\n                      We will continue working on the git-training-demo repository. Your permissions have been reduced so that you can no longer push to the main Met Office repository, you will have to use a fork! The main Met Office repository is now the upstream repository for you fork."
  },
  {
    "objectID": "episodes/aio.html#open-an-issue",
    "href": "episodes/aio.html#open-an-issue",
    "title": "Git & GitHub Working Practices",
    "section": "Open an Issue",
    "text": "Open an Issue\n                      Open a new issue like you did earlier to add more detail to your favourite cloud file."
  },
  {
    "objectID": "episodes/aio.html#create-a-fork",
    "href": "episodes/aio.html#create-a-fork",
    "title": "Git & GitHub Working Practices",
    "section": "Create a Fork",
    "text": "Create a Fork\n                      On the repository Code tab click on the Fork dropdown arrow and then the + Create a new fork button:\n                      \n                      GitHub will take you to the Create a new fork page. There is no need to edit anything on this page. Click on the green Create fork button:\n                      \n                      You should now see your repository fork. The repository is marked as a fork by the fork symbol next to the repository organisation and name in the top navigation bar. Under the main repository name you can see a link to the repository we forked from. The notification at the bottom of the screenshot shows whether your forks main branch is up to date with the upstream repository. If you have commits on your fork not present upstream you can Contribute your changes upstream via a PR. If your fork is behind the upstream repository you can Sync fork to pull in changes from the upstream repository."
  },
  {
    "objectID": "episodes/aio.html#make-changes",
    "href": "episodes/aio.html#make-changes",
    "title": "Git & GitHub Working Practices",
    "section": "Make Changes",
    "text": "Make Changes\n                      To avoid overwriting your local version of the original Met Office git-training-demo repository you need to clone your fork to a different location.\n                      To clone the repository into your Desktop folder:\n                      $ git clone git@github.com:mo-fitzroy/git-training-demo.git ~/Desktop/mo-fitzroy-git-training-demo\n                      Replace ‘mo-fitzroy’ with the Owner’s username.\n                      If you choose to clone without the clone path (~/Desktop/mo-fitzroy-weather) specified at the end, you will clone inside the git-training-demo folder!\n                      Cloning into '~/Desktop/mo-fitzroy-git-training-demo'...\nremote: Enumerating objects: 16, done.\nremote: Counting objects: 100% (16/16), done.\nremote: Compressing objects: 100% (16/16), done.\nremote: Total 16 (delta 1), reused 11 (delta 0), pack-reused 0 (from 0)\nReceiving objects: 100% (16/16), 5.01 KiB | 1.00 MiB/s, done.\nResolving deltas: 100% (1/1), done.\n                      Create your feature branch:\n                      $ cd ~/Desktop/mo-fitzroy-git-training-demo\n$ git switch -c 2_update_favourite_cloud\n                      Switched to a new branch '2_update_favourite_cloud'\n                      Add more detail to your favourite cloud file:\n                      $ nano cloud-mo-fitzroy.md\n$ cat cloud-mo-fitzroy.md\n                      # My Favourite Cloud\n\nLight and fluffy cumulus.\nNice to sail under.\n                      Add and commit your changes:\n                      $ git add cloud-mo-fitzroy.md\n$ git commit -m \"Adds more details to Robert FitzRoy's favourite cloud file\"\n                      [2_update_favourite_cloud 1b05798] Adds more details to Robert FitzRoy's favourite cloud file\n 1 file changed, 1 insertion(+)\n                      Push the changes to your GitHub fork:\n                      $ git push\n                      Enumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 369 bytes | 123.00 KiB/s, done.\nTotal 3 (delta 1), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nremote: \nremote: Create a pull request for '2_update_favourite_cloud' on GitHub by visiting:\nremote:      https://github.com/mo-fitzroy/git-training-demo/pull/new/2_update_favourite_cloud\nremote: \nTo github.com:mo-fitzroy/git-training-demo.git\n * [new branch]      2_update_favourite_cloud -&gt; 2_update_favourite_cloud\nbranch '2_update_favourite_cloud' set up to track 'origin/2_update_favourite_cloud'."
  },
  {
    "objectID": "episodes/aio.html#open-a-pull-request",
    "href": "episodes/aio.html#open-a-pull-request",
    "title": "Git & GitHub Working Practices",
    "section": "Open a Pull Request",
    "text": "Open a Pull Request\n                      Head back to your fork on GitHub and open a PR to contribute your changes upstream to the main git-training-demo repository. You must use the Fixes keyword this time to automatically close your Issue when the PR is merged since you are contributing the change from a Fork6.\n                      \n                      The PR will now need to be approved and merged by your instructors.\n                      \n                      \n                      \n                        \n                        \n                        Instructor Note\n                        \n                      \n                      \n                      \n                      Take a break here! This will give you and your co-instructor time to approve, and squash and merge the PRs."
  },
  {
    "objectID": "episodes/aio.html#updating-a-fork",
    "href": "episodes/aio.html#updating-a-fork",
    "title": "Git & GitHub Working Practices",
    "section": "Updating a Fork",
    "text": "Updating a Fork\n                      Our fork is now behind the main upstream repository by one commit. We are going to update our fork. First we need to set the correct upstream remote in git.\n                      Switch back to your forks main branch:\n                      $ git switch main\n                      Now run:\n                      $ git remote -v\n                      origin  git@github.com:mo-fitzroy/git-training-demo.git (fetch)\norigin  git@github.com:mo-fitzroy/git-training-demo.git (push)\n                      This shows the GitHub remote links for our fork. To set the upstream remote we can run:\n                      $ git remote add upstream git@github.com:MetOffice/git-training-demo.git\n$ git remote -v\n                      origin  git@github.com:mo-fitzroy/git-training-demo.git (fetch)\norigin  git@github.com:mo-fitzroy/git-training-demo.git (push)\nupstream    git@github.com:MetOffice/git-training-demo.git (fetch)\nupstream    git@github.com:MetOffice/git-training-demo.git (push)\n                      Now git knows about the forks upstream repository. We can fetch the changes to the upstream repository by running:\n                      $ git fetch upstream\n                      remote: Enumerating objects: 6, done.\nremote: Counting objects: 100% (6/6), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 4 (delta 3), reused 2 (delta 2), pack-reused 0 (from 0)\nUnpacking objects: 100% (4/4), 1.10 KiB | 41.00 KiB/s, done.\nFrom github.com:MetOffice/git-training-demo\n * [new branch]      main                   -&gt; upstream/main\n                      We now have access to the upstream/main branch. To merge in the changes on upstream/main:\n                      $ git merge upstream/main\n                      And push:\n                      $ git push\n                      Total 0 (delta 0), reused 0 (delta 0), pack-reused 0\nTo github.com:mo-fitzroy/git-training-demo.git\n   f87bb5c..90808ab  main -&gt; main\n                      Your forks main branch is now up to date with the original git-training-demo repositories main branch.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Sync via GitHub\n                      \n                      \n                      \n                      This is equivalent of syncing your fork via the GitHub banner shown earlier:\n                      \n                      If your fork is behind the upstream repository GitHub will alert you on the banner. You can use the Sync fork button to update your fork like we did above. After syncing your fork this way run git pull on your local main branch."
  },
  {
    "objectID": "episodes/aio.html#summary-diagram",
    "href": "episodes/aio.html#summary-diagram",
    "title": "Git & GitHub Working Practices",
    "section": "Summary Diagram",
    "text": "Summary Diagram\n                      The workflow for forking is similar to that for branching. There are only a few differences after you’ve set up your fork for the first time:\n                      \n                      You should open Issues on the upstream repository not your fork.\n                      After merging in a PR on the upstream repository you need the added step of syncing your forks main branch.\n                      \n                      sequenceDiagram\n    accDescr {A sequence diagram showing the steps for using\n    Forks with the branching model.}\n    autonumber\n    participant UM as upstream main\n    participant GHM as origin main\n    participant GHF as origin feature\n    participant M as main\n    UM -&gt;&gt; UM: #f\n    Note over UM: Open an Issue for the change\n    UM --&gt;&gt; GHM: #f\n    Note right of UM: First time: Fork the repository\n    GHM --&gt;&gt; M: #f\n    Note right of GHM: First time: git clone&lt;br/&gt;Then: git pull\n    create participant F as feature\n    M -&gt;&gt; F: Create a feature branch:&lt;br/&gt;git switch -c feature\n    loop\n        F -&gt;&gt; F: #f\n        Note over F: Develop changes:&lt;br/&gt;git add&lt;br/&gt;git commit\n    end\n    F --&gt;&gt; GHF: #f\n    Note left of F: Push to GitHub: git push&lt;br/&gt;The first push creates origin feature!\n    destroy GHF\n    GHF --&gt;&gt; UM: #f\n    Note left of GHF: Pull Request and then Merge.&lt;br/&gt;Delete origin feature branch.\n    UM --&gt;&gt; GHM: #f\n    Note right of UM: Sync your fork\n    GHM --&gt;&gt; M: #f\n    Note right of GHM: git pull\n    Note over F: Delete branch:&lt;br/&gt;git branch -d feature\n    box Upstream Remote - GitHub\n    participant UM\n    end\n    box Fork Remote - GitHub\n    participant GHM\n    participant GHF\n    end\n    box Fork - Local\n    participant M\n    participant F\n    end\n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      A fork is a server side, in our case GitHub, copy of the repository.\n                      Forks allow collaborators to contribute to the main repository without being given collaborator access or write permissions.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      What is a fork?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Explain what conflicts are and when they can occur.\n                      Resolve conflicts resulting from a merge.\n                      \n                      \n                      \n                      \n                      \n                      \n                      As soon as people start working in parallel, they’ll likely step on each other’s toes. This will even happen with a single person: if we are working on a piece of software on both our laptop and a server in the lab, we could make different changes to each copy. Version control helps us manage these conflicts by giving us tools to resolve overlapping changes. You will encounter conflicts no matter which branching model you choose. No model is more or less likely to produce conflicts. No model will make conflicts easier (or harder) to resolve. Using forks has no impact on how likely conflicts are to occur.\n                      \n                      \n                      \n                        \n                        \n                        Instructor Note\n                        \n                      \n                      \n                      \n                      To create the conflict for all learners your co-instructor should follow along making the same changes the learners make. The co-instructors PR should be merged just before the learners open their PRs. If the co-instructor has the relevant permissions they can do this themselves while the instructor is still teaching.\n                      \n                      \n                      \n                      \n                      To learn how to resolve conflicts we are going to create one on purpose. We will do this by getting everyone to edit the same line of the same file at once. Open an Issue on the git-training-demo repository for adding yourself to the list of authors in the CITATION.cff file. Make a note of the Issue number to use as the prefix for your feature branch name.\n                      Make sure you are on the main branch. Create your feature branch:\n                      $ git switch -c 7_add-citation-fitzroy\n                      Switched to a new branch '7_add-citation-fitzroy'\n                      Add your name to the CITATION.cff file, underneath any existing author names:\n                      $ nano CITATION.cff\n$ cat CITATION.cff\n                      cff-version: 1.2.0\nmessage: \"Met Office Colleagues and Partners\"\nauthors:\n- family-names: \"Theodorakis\"\n  given-names: \"Dimitrios\"\n  orcid: \"https://orcid.org/0000-0001-9288-1332\"\n- family-names: \"FitzRoy\"\n  given-names: \"Robert\"\ntitle: \"Met Office Git Training Demo\"\nversion: 2.0.4\ndoi: 10.4321/zenodo.1234\ndate-released: 2024-09-23\nurl: \"https://github.com/MetOffice/git-training-demo\"\n                      Add and commit your changes:\n                      $ git add CITATION.cff\n$ git commit -m \"Adds Robert Fitzroy as an author\"\n                      [7_add-citation-fitzroy a3c5e13] \"Adds Robert Fitzroy as an author\" \n 1 file changed, 2 insertions(+)\n                      Push your changes to your GitHub fork:\n                      $ git push\n                      Enumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 354 bytes | 354.00 KiB/s, done.\nTotal 3 (delta 2), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (2/2), completed with 2 local objects.\nTo github.com:mo-fitzroy/git-training-demo.git\n   f87bb5c..a3c5e13  7_add-citation-fitzroy -&gt; 7_add-citation-fitzroy\nbranch '7_add-citation-fitzroy' set up to track 'origin/7_add-citation-fitzroy'."
  },
  {
    "objectID": "episodes/aio.html#open-a-pull-request-1",
    "href": "episodes/aio.html#open-a-pull-request-1",
    "title": "Git & GitHub Working Practices",
    "section": "Open a Pull Request",
    "text": "Open a Pull Request\n                      Head back to your fork on GitHub and open a PR to contribute your changes upstream to the main git-training-demo repository. Fill out the template like you did in the previous episode.\n                      At the bottom of your PR GitHub is telling us This branch has conflicts that must be resolved and the conflicting file is CITATION.cff.\n                      Go to the main git-training-demo repositories code tab and look at the contents of CITATION.cff:\n                      cff-version: 1.2.0\nmessage: \"Met Office Colleagues and Partners\"\nauthors:\n- family-names: \"Theodorakis\"\n  given-names: \"Dimitrios\"\n  orcid: \"https://orcid.org/0000-0001-9288-1332\"\n- family-names: \"Hogan\"\n  given-names: \"Emma\"\ntitle: \"Met Office Git Training Demo\"\nversion: 2.0.4\ndoi: 10.4321/zenodo.1234\ndate-released: 2024-09-23\nurl: \"https://github.com/MetOffice/git-training-demo\"\n                      Someone else has added their name before our PR could be merged. These changes now conflict with the one you made.\n                      \n                      \n                      \n                        \n                        \n                        Practising By Yourself\n                        \n                      \n                      \n                      \n                      If you’re working through this lesson on your own, you won’t see a conflict. You should still follow the materials to learn what to do when you encounter a conflict.\n                      \n                      \n                      \n                      \n                      \n                      Blame\n                      GitHub lets you see who made changes to the file you are looking at in the Code viewer. Click on the Blame button:\n                      \n                      The image above shows blame on the weather repositories forecast.md file. The far left shows how long ago the commit was that changed those lines. Then the commit message is displayed before the file contents. Click on the little page icon after a commit message to see previous commits which altered the same lines. Try using blame on the CITATION.cff file to see who added the conflicting change.\n                      \n                      \n                      Compare changes\n                      In the git-novice lesson we learnt how to diff between commits on the same branch. You can also look at diffs between branches even if they are on a different fork using GitHub.\n                      To see a difference for a repository add /compare to the end of the repository url.\n                      \n                      Navigate to: https://github.com/MetOffice/git-training-demo/compare/, and click on the compare across forks link.\n                      Click on the head repository dropdown and find your fork.\n                      Click on the compare dropdown and select your feature branch.\n                      \n                      A diff should appear comparing your fork’s feature branch with the upstream repositories main branch."
  },
  {
    "objectID": "episodes/aio.html#resolving-conflicts",
    "href": "episodes/aio.html#resolving-conflicts",
    "title": "Git & GitHub Working Practices",
    "section": "Resolving Conflicts",
    "text": "Resolving Conflicts\n                      We’re going to resolve the conflict by merging in the main branch into our feature branch 7_add-citation-fitzroy:\n                      gitGraph\n    accDescr {A git graph showing the &lt;code&gt;main&lt;/code&gt; branch being merged\n    into the &lt;code&gt;7_add-citation-fitzroy&lt;/code&gt; branch to resolve merge conflicts.}\n    commit id: 'cdb7fa6'\n    branch 7_add-citation-fitzroy\n    commit id: 'a3c5e13 Adds Robert Fitzroy as an author'\n    checkout main\n    commit id: 's7dja9o'\n    checkout 7_add-citation-fitzroy\n    merge main\n                      First we need to make sure our fork’s main branch is in sync with the upstream repository. Navigate to your fork on GitHub and click on the Sync fork button.\n                      In your local copy of your fork, update the main branch:\n                      $ git switch main\n$ git pull\n                      Switch back to the feature branch:\n                      $ git switch 7_add-citation-fitzroy\n                      Switched to branch '7_add-citation-fitzroy'\n                      Merge in the main branch:\n                      $ git merge main\n                      Auto-merging CITATION.cff\nCONFLICT (content): Merge conflict in CITATION.cff\nAutomatic merge failed; fix conflicts and then commit the result.\n                      Git is warning us about the conflict. We are still merging, if you run git status you will see:\n                      $ git status\n                      On branch 7_add-citation-fitzroy\nYour branch is up to date with 'origin/7_add-citation-fitzroy'.\n\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n  (use \"git merge --abort\" to abort the merge)\n\nUnmerged paths:\n  (use \"git add &lt;file&gt;...\" to mark resolution)\n    both modified:   CITATION.cff\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n                      The message tells us both modified the CITATION.cff file since both main and our feature branch modified this file.\n                      If we look at the CITATION.cff file now:\n                      $ cat CITATION.cff\n                      cff-version: 1.2.0\nmessage: \"Met Office Colleagues and Partners\"\nauthors:\n- family-names: \"Theodorakis\"\n  given-names: \"Dimitrios\"\n  orcid: \"https://orcid.org/0000-0001-9288-1332\"\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n- family-names: \"FitzRoy\"\n  given-names: \"Robert\"\n=======\n- family-names: \"Hogan\"\n  given-names: \"Emma\"\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; dabb4c8c450e8475aee9b14b4383acc99f42af1d\ntitle: \"Met Office Git Training Demo\"\nversion: 2.0.4\ndoi: 10.4321/zenodo.1234\ndate-released: 2024-09-23\nurl: \"https://github.com/MetOffice/git-training-demo\"\n                      Our change is preceded by &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD. Git has then inserted ======= as a separator between the conflicting changes and marked the end of the content downloaded from GitHub with &gt;&gt;&gt;&gt;&gt;&gt;&gt;. (The string of letters and digits after that marker identifies the commit we’ve just downloaded.)\n                      It is now up to us to edit this file to remove these markers and reconcile the changes. We can do anything we want: keep the change made in the local repository, keep the change made in the remote repository, write something new to replace both, or get rid of the change entirely. Let’s replace both so that the file looks like this:\n                      $ cat CITATION.cff\n                      cff-version: 1.2.0\nmessage: \"Met Office Colleagues and Partners\"\nauthors:\n- family-names: \"Theodorakis\"\n  given-names: \"Dimitrios\"\n  orcid: \"https://orcid.org/0000-0001-9288-1332\"\n- family-names: \"Hogan\"\n  given-names: \"Emma\"\n- family-names: \"FitzRoy\"\n  given-names: \"Robert\"\ntitle: \"Met Office Git Training Demo\"\nversion: 2.0.4\ndoi: 10.4321/zenodo.1234\ndate-released: 2024-09-23\nurl: \"https://github.com/MetOffice/git-training-demo\"\n                      To finish merging, we add CITATION.cff to the changes being made by the merge and then commit:\n                      $ git add CITATION.cff \n$ git status\n                      On branch 7_add-citation-fitzroy\nAll conflicts fixed but you are still merging.\n  (use \"git commit\" to conclude merge)\n\nChanges to be committed:\n\n    modified:   CITATION.cff\n                      $ git commit\n                      [7_add-citation-fitzroy 312c561] Merge branch 'main' into 7_add-citation-fitzroy\n                      Now we can push our changes to GitHub:\n                      $ git push\n                      Enumerating objects: 7, done.\nCounting objects: 100% (7/7), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 385 bytes | 128.00 KiB/s, done.\nTotal 3 (delta 2), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (2/2), completed with 2 local objects.\nTo github.com:mo-fitzroy/git-training-demo.git\n   a3c5e13..312c561  7_add-citation-fitzroy -&gt; 7_add-citation-fitzroy\n                      Your PR on GitHub should now be ready to merge, after review of course."
  },
  {
    "objectID": "episodes/aio.html#avoiding-conflict",
    "href": "episodes/aio.html#avoiding-conflict",
    "title": "Git & GitHub Working Practices",
    "section": "Avoiding Conflict",
    "text": "Avoiding Conflict\n                      Git’s ability to resolve conflicts is very useful, but conflict resolution costs time and effort, and can introduce errors if conflicts are not resolved correctly. If you find yourself resolving a lot of conflicts in a project, consider these technical approaches to reducing them:\n                      \n                      Pull from upstream more frequently, especially before starting new work\n                      Use topic branches to segregate work, merging to main via a PR when complete\n                      Make smaller more atomic commits\n                      Push your work when it is done and encourage your team to do the same to reduce work in progress and, by extension, the chance of having conflicts\n                      Where logically appropriate, break large files into smaller ones so that it is less likely that two authors will alter the same file simultaneously\n                      \n                      Conflicts can also be minimized with project management strategies:\n                      \n                      Clarify who is responsible for what areas with your collaborators\n                      Discuss what order tasks should be carried out in with your collaborators so that tasks expected to change the same lines won’t be worked on simultaneously\n                      If the conflicts are stylistic churn (e.g. tabs vs. spaces), establish a project convention that is governing and use code style tools (e.g. htmltidy, perltidy, rubocop, etc.) to enforce, if necessary\n                      \n                      \n                      \n                      \n                      \n                      \n                      Conflicts on Non-textual files\n                      \n                      What does Git do when there is a conflict in an image or some other non-textual file that is stored in version control?\n                      \n                      Solution (Solution). Let’s try it with your weather repository. Suppose you take a picture of the television forecast and call it forecast.jpg. Jimmy has already created a feature branch to add the image in.\n                      $ git switch add_forecast_image\n                      If you do not have an image file of forecast available, you can create a dummy binary file like this:\n                      $ head --bytes 1024 /dev/urandom &gt; forecast.jpg\n$ ls -lh forecast.jpg\n                      -rw-r--r-- 1 mo-eormerod 57095 1.0K Mar  8 20:24 forecast.jpg\n                      ls shows us that this created a 1-kilobyte file. It is full of random bytes read from the special file, /dev/urandom.\n                      Now, suppose you add forecast.jpg to your repository:\n                      $ git add forecast.jpg\n$ git commit -m \"Add picture of forecast\"\n                      [add_forecast_image 8e4115c] Add picture of forecast\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 forecast.jpg\n                      Suppose that Jimmy has added a similar picture in the meantime. His is a picture of a forecast from Chile, but it is also called forecast.jpg. When you try to push, you get a familiar message:\n                      $ git push\n                      To https://github.com/mo-eormerod/weather.git\n ! [rejected]        add_forecast_image -&gt; add_forecast_image (fetch first)\nerror: failed to push some refs to 'https://github.com/mo-eormerod/weather.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n                      We’ve learned that we must pull first and resolve any conflicts:\n                      $ git pull\n                      When there is a conflict on an image or other binary file, git prints a message like this:\n                      $ git pull\nremote: Counting objects: 3, done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/mo-eormerod/weather.git\n * branch            add_forecast_image     -&gt; FETCH_HEAD\n   6a67967..439dc8c  add_forecast_image     -&gt; origin/add_forecast_image\nwarning: Cannot merge binary files: forecast.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\nAuto-merging forecast.jpg\nCONFLICT (add/add): Merge conflict in forecast.jpg\nAutomatic merge failed; fix conflicts and then commit the result.\n                      The conflict message here is mostly the same as it was for forecast.md, but there is one key additional line:\n                      warning: Cannot merge binary files: forecast.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\n                      Git cannot automatically insert conflict markers into an image as it does for text files. So, instead of editing the image file, we must check out the version we want to keep. Then we can add and commit this version.\n                      On the key line above, Git has conveniently given us commit identifiers for the two versions of forecast.jpg. Our version is HEAD, and Jimmy’s version is 439dc8c0.... If we want to use our version, we can use git checkout:\n                      $ git checkout HEAD forecast.jpg\n$ git add forecast.jpg\n$ git commit -m \"Use image of just the local forecast\"\n                      [add_forecast_image 21032c3] Use image of just the local forecast\n                      If instead we want to use Jimmy’s version, we can use git checkout with Jimmy’s commit identifier, 439dc8c0:\n                      $ git checkout 439dc8c0 forecast.jpg\n$ git add forecast.jpg\n$ git commit -m \"Use image of just the local forecast\"\n                      [add_forecast_image da21b34] Use image of forecast with nachos instead of just forecast\n                      We can also keep both images. The catch is that we cannot keep them under the same name. But, we can check out each version in succession and rename it, then add the renamed versions. First, check out each image and rename it:\n                      $ git checkout HEAD forecast.jpg\n$ git mv forecast.jpg forecast-only.jpg\n$ git checkout 439dc8c0 forecast.jpg\n$ mv forecast.jpg forecast-chile.jpg\n                      Then, remove the old forecast.jpg and add the two new files:\n                      $ git rm forecast.jpg\n$ git add forecast-only.jpg\n$ git add forecast-chile.jpg\n$ git commit -m \"Use two images: local forecast and Chile forecast\"\n                      [add_forecast_image 94ae08c] Use two images: local forecast and Chile forecast\n 2 files changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 forecast-chile.jpg\n rename forecast.jpg =&gt; forecast-only.jpg (100%)\n                      Now both images of forecast are checked into the repository, and forecast.jpg no longer exists.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      Conflicts occur when two or more people change the same lines of the same file.\n                      The version control system does not allow people to overwrite each other’s changes blindly, but highlights conflicts so that they can be resolved.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      What do I do when my changes conflict with someone else’s?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Visualise our git history.\n                      Learn the difference between merge, squash merge, and rebase.\n                      \n                      \n                      \n                      \n                      \n                      \n                      The history of your repository is simply its commits. A more linear history is easier to understand and can be helpful when using certain git commands to explore your history.\n                      Your Git history will look different depending on the merge strategy you use when merging PRs and whether you allow merging main into a feature branch like we did in the last episode to resolve the conflict. It’s up to you and your team to decide which strategy is best for your repository."
  },
  {
    "objectID": "episodes/aio.html#viewing-history",
    "href": "episodes/aio.html#viewing-history",
    "title": "Git & GitHub Working Practices",
    "section": "Viewing History",
    "text": "Viewing History\n                      You have already learnt that we can use the git log command to output the commit history of our repository.\n                      $ git log\n                      commit acce45c86ece7fd4823ddc6c1addb43edf4c0794\nMerge: e3fc783 ca8aca9\nAuthor: Robert FitzRoy &lt;r.fitzroy@mo-weather.uk&gt;\nDate:   Mon Sep 23 15:50:15 2024 +0100\n\n    Merge pull request #1 from MetOffice/mo-fitzroy-patch-1\n    \n    Create CITATION.cff\n\ncommit ca8aca9f2f43a4d799eb5c9ce9596b42360faa8b\nAuthor: Robert FitzRoy &lt;r.fitzroy@mo-weather.uk&gt;\nDate:   Mon Sep 23 15:49:36 2024 +0100\n\n    Create CITATION.cff\n\ncommit e3fc783648222d5eef0739922b06794b8d690341\nAuthor: Robert FitzRoy &lt;r.fitzroy@mo-weather.uk&gt;\nDate:   Fri Sep 20 13:01:05 2024 +0100\n\n    Initial commit\n                      This shows the first 3 commits to the git-training-demo repository (the full output isn’t shown here because it’s very long). We can use certain flags with git log to better visualise the history in graph form:\n                      $ git log --decorate --oneline --graph\n                      *   d800b46 (HEAD -&gt; main, origin/main, origin/HEAD) Merge pull request #2 from MetOffice/mo-fitzroy-patch-2\n|\\  \n| * dbc944d Add pre-commit checks\n|/  \n*   acce45c Merge pull request #1 from MetOffice/mo-fitzroy-patch-1\n|\\  \n| * ca8aca9 Create CITATION.cff\n|/  \n* e3fc783 Initial commit\n                      The GitHub Documentation for git log has information on all the available flags. The key here is --graph shows us the graphical representation of our history on the left of the terminal. *’s are commits which are connected by lines. The vertical lines represent links between commits. The output above shows two feature branches each with only one commit which were then merged back into main via a pull request.\n                      You can either remember the flags using the phrase “git dog”, d for --decorate, o for --oneline, g for --graph or you can set an alias for the git log command:\n                      $ git config --global alias.dog \"log --decorate --oneline --graph\"\n                      This alias makes these two commands equivalent:\n                      $ git dog\n$ git log --decorate --oneline --graph\n                      You can of course customise the log command with other keywords and set more aliases for different log views. Some useful examples can be found on this Stackoverflow comment.\n                      \n                      \n                      \n                      \n                      \n                      \n                      IDE Git History Extensions\n                      \n                      \n                      \n                      Your IDE may have extensions which render your git history as easy to read graphs. If you use VSCode we recommend the Git Graph extension."
  },
  {
    "objectID": "episodes/aio.html#merge-options",
    "href": "episodes/aio.html#merge-options",
    "title": "Git & GitHub Working Practices",
    "section": "Merge Options",
    "text": "Merge Options\n                      When you opened your PRs you were given three options for merging your feature branch into main. We will now explore how each merging method affects the history of your repository. In all the examples below we start with the same git history.\n                      \n                      Merge\n                      Starting with:\n                      gitGraph\n    accDescr {A Git graph showing the &lt;code&gt;main&lt;/code&gt; branch with a &lt;code&gt;feature&lt;/code&gt; branch branching off at the second commit of &lt;code&gt;main&lt;/code&gt;.}\n    commit id: '4631ebc'\n    commit id: 'ee406ac'\n    branch feature\n    checkout feature\n    commit id: '7cec787 Cool feature'\n    checkout main\n    commit id: '62440f8'\n    checkout feature\n    commit id: 'cd2db46 Cool feature docs'\n                      Using merge creates a merge commit joining the two branches:\n                      gitGraph\n    accDescr {A Git graph showing the result of merging a &lt;code&gt;feature&lt;/code&gt; branch with the &lt;code&gt;main&lt;/code&gt; branch. The history is non-linear in this case and difficult to read.}\n    commit id: '4631ebc'\n    commit id: 'ee406ac'\n    branch feature\n    checkout feature\n    commit id: '7cec787 Cool feature'\n    checkout main\n    commit id: '62440f8'\n    checkout feature\n    commit id: 'cd2db46 Cool feature docs'\n    checkout main\n    merge feature\n                      This results in a non-linear history which can be hard to navigate. You can avoid this non-linear history by rebasing your feature branch before you merge. Rebasing a branch before you submit a PR for review is covered in the next episode.\n                      Some teams choose to use Merge because it keeps all the individual commits that made up your change so more accurately represents the history of your repository.\n                      \n                      \n                      Squash and Merge\n                      Starting with:\n                      gitGraph\n    accDescr {A Git graph showing the &lt;code&gt;main&lt;/code&gt; branch with a &lt;code&gt;feature&lt;/code&gt; branch branching off at the second commit of &lt;code&gt;main&lt;/code&gt;.}\n    commit id: '4631ebc'\n    commit id: 'ee406ac'\n    branch feature\n    checkout feature\n    commit id: '7cec787 Cool feature'\n    checkout main\n    commit id: '62440f8'\n    checkout feature\n    commit id: 'cd2db46 Cool feature docs'\n                      Squashing before merging squashes all the commits on the feature branch into one commit which is then merged onto main:\n                      gitGraph\n    accDescr {A Git graph showing the result of squashing then merging a &lt;code&gt;feature&lt;/code&gt; branch with the &lt;code&gt;main&lt;/code&gt; branch.}\n    commit id: '4631ebc'\n    commit id: 'ee406ac'\n    commit id: '62440f8'\n    commit id: '5rtw8bq Squash & Merge Cool feature'\n                      The last commit on main 5rtw8bq Squash & Merge Cool feature is the two feature branch commits squashed together into a new one.\n                      Here the history is linear but all our commits have been squashed into one. If you have a very large branch with many commits you might not want to squash them all into one commit. Squashing in this case will make bug hunting harder. Remember you should try and break work down into small pieces so you avoid huge branches.\n                      \n                      \n                      Rebase\n                      Starting with:\n                      gitGraph\n    accDescr {A Git graph showing the &lt;code&gt;main&lt;/code&gt; branch with a &lt;code&gt;feature&lt;/code&gt; branch branching off at the second commit of &lt;code&gt;main&lt;/code&gt;.}\n    commit id: '4631ebc'\n    commit id: 'ee406ac'\n    branch feature\n    checkout feature\n    commit id: '7cec787 Cool feature'\n    checkout main\n    commit id: '62440f8'\n    checkout feature\n    commit id: 'cd2db46 Cool feature docs'\n                      Rebase re-writes your git history removing the feature branch commits from the feature branch and adding them to main:\n                      gitGraph\n    accDescr {A Git graph showing the result of rebasing a &lt;code&gt;feature&lt;/code&gt; branch with the &lt;code&gt;main&lt;/code&gt; branch.}\n    commit id: '4631ebc'\n    commit id: 'ee406ac'\n    commit id: '62440f8'\n    commit id: '7cec787 Cool feature'\n    commit id: 'cd2db46 Cool feature docs'\n                      \n                      \n                      Rebase Re-Writes History\n                      Rebasing re-writes your git history. Do NOT rebase shared branches such as main.\n                      \n                      Since rebase re-writes your history you have to force push to the GitHub remote to override your remotes history. The history in this case is linear and retains all the commits which makes it easier to search for a commit that introduced a bug. Rebasing a feature branch can be difficult / impossible if you have merged main into your feature branch to update it with the latest changes or resolve conflicts. You should choose to move your feature branch to the HEAD of main using rebasing instead.\n                      Your team will decide what approach is right for your project.\n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      git log --decorate --oneline --graph lets you visualise your repository history in graph form.\n                      There are three options for merging your feature branch into main.\n                      merge: creates a merge commit and results in a non-linear history unless you first rebase your feature branch.\n                      squash and merge: squashes all your feature branch commits into one merge commit on main. Your history is linear.\n                      rebase: re-writes your git history so that all the feature branch commits are now on main. Your history is linear.\n                      \n                      \n                      \n                      \n                      This marks the end of the the workshop. Please remember to fill out your post-workshop feedback. This feedback is vital for us to keep improving the lesson for other learners.\n                      Episodes after this End page are optional. Your instructor may choose to teach these episodes if time permits. Otherwise feel free to work through the episodes in your own time.\n                      \n                      Where to next?\n                      We’ve covered a lot over the last two workshops but there is always more to learn especially when it comes to GitHub!\n                      \n                      Microsoft Learn has a wide variety of GitHub training.\n                      In this lesson you saw automated testing of PRs using GitHub Actions which you might like to explore more.\n                      The optional rebasing episode guides you through rebasing a branch.\n                      Your Pull Requests ran automated tests using pre-commit checks which you can set up locally to run before you commit. The optional pre-commit episode outlines how to set up some basic checks.\n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      Why is a linear history useful?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Rebase a feature branch to clean up its history.\n                      Use rebase to update a feature branch to the HEAD of main.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Rebasing a branch re-writes your git history and should be used with caution. You might want to rebase if:\n                      \n                      You need to tidy up your branches history before performing a normal merge via a PR. This will help keep the history of the main branch linear.\n                      You need to update your branch with changes from the main branch."
  },
  {
    "objectID": "episodes/aio.html#tidying-your-commit-history",
    "href": "episodes/aio.html#tidying-your-commit-history",
    "title": "Git & GitHub Working Practices",
    "section": "Tidying your Commit History",
    "text": "Tidying your Commit History\n                      Consider the following scenario. You want to add a plotting script to the git-training-demo repository. You make a branch for the feature:\n                      $ git switch -c add_plot_script main\n                      Switched to branch 'add_plot_script'\n                      And over the course of development you make three commits to the file plot_lfric.py. Use the commands in each tab make the same commits to your repository:\n                      \n                      \n                      Commit 1\n                      $ nano plot_lfric.py\n$ cat plot_lfric.py\n                      # pretnd there is code here!\n                      $ git add plot_lfric.py\n$ git commit -m \"Adds in a Python script to plot LFRic data\"\n                      [add_plot_script 64ac261] Adds in a Python script to plot LFRic data\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 plot_lfric.py\n                      \n                      \n                      Commit 2\n                      $ nano plot_lfric.py\n$ cat plot_lfric.py\n                      # pretnd there is code here!\n# more Python\n                      $ git commit -am \"Extends the LFRic data plotting script to plot 2D fields\"\n                      [add_plot_script 7053de7] Extends the LFRic data plotting script to plot 2D fields\n 1 file changed, 1 insertion(+)\n                      \n                      \n                      Commit 3\n                      $ nano plot_lfric.py\n$ cat plot_lfric.py\n                      # pretend there is code here!\n# more Python\n                      $ git commit -am \"Fixes the axis labels spelling in the LFRic data plotting script\"\n                      [add_plot_script 0bb7871] Fixes the axis labels spelling in the LFRic data plotting script\n 1 file changed, 1 insertion(+)\n                      \n                      \n                      Before you push to the remote and open a PR you check your git history. The git history now looks something like this:\n                      gitGraph\n    accDescr {A Git graph showing the &lt;code&gt;main&lt;/code&gt; branch with the &lt;code&gt;add_plot_script&lt;/code&gt; branch branching off at the first commit of &lt;code&gt;main&lt;/code&gt;.}\n    commit id: 'ed14d18'\n    branch add_plot_script\n    checkout add_plot_script\n    commit id: '64ac261'\n    commit id: '7053de7'\n    commit id: '0bb7871'\n                      We can also visualise these changes with git log:\n                      $ git log --decorate --oneline --graph\n                      * 0bb7871 (HEAD -&gt; add_plot_script) Fixes the axis labels spelling in the LFRic data plotting script\n* 7053de7 Extends the LFRic data plotting script to plot 2D fields\n* 64ac261 Adds in a Python script to plot LFRic data\n* ed14d18 (origin/main) Adds Robert FitzRoy as an author (#8)\n                      You realise that perhaps the spelling fix in the third commit should have been a correction to the first commit which added in the script. We can use rebase to re-write our history and combine these two commits."
  },
  {
    "objectID": "episodes/aio.html#backup-your-branch",
    "href": "episodes/aio.html#backup-your-branch",
    "title": "Git & GitHub Working Practices",
    "section": "Backup your Branch",
    "text": "Backup your Branch\n                      It is a good idea to create a backup of your feature branch just in case something goes wrong during the rebase:\n                      $ git branch add_plot_script.backup\n                      If at anytime you want to restore the branch from your backup switch to the backup:\n                      $ git switch add_plot_script.backup\n                      Delete the branch where rebasing was attempted:\n                      $ git branch -D add_plot_script\n                      Re-create the original branch while still on the backup branch:\n                      $ git switch -c add_plot_script"
  },
  {
    "objectID": "episodes/aio.html#aborting-a-rebase",
    "href": "episodes/aio.html#aborting-a-rebase",
    "title": "Git & GitHub Working Practices",
    "section": "Aborting a Rebase",
    "text": "Aborting a Rebase\n                      If you want to cancel the rebase at the above stage either do nothing to the file or delete all the commit lines.\n                      After you save and close the file, if your rebase has conflicts, you can abort at anytime using:\n                      $ git rebase --abort"
  },
  {
    "objectID": "episodes/aio.html#updating-a-branch",
    "href": "episodes/aio.html#updating-a-branch",
    "title": "Git & GitHub Working Practices",
    "section": "Updating a Branch",
    "text": "Updating a Branch\n                      You can also use rebase to move your changes to branch off the HEAD of main. While we rebased our feature branch another PR was merged with main:\n                      gitGraph\n    accDescr {A Git graph showing the &lt;code&gt;main&lt;/code&gt; branch with the &lt;code&gt;add_plot_script&lt;/code&gt; branch branching off at the first commit of &lt;code&gt;main&lt;/code&gt;.}\n    commit id: 'ed14d18'\n    branch add_plot_script\n    checkout add_plot_script\n    commit id: 'e56ed99'\n    commit id: 'd7def6a'\n    checkout main\n    commit id: '4rtzk8g'\n                      We can use rebasing to move our feature branch so it branches off the HEAD of main, fixing any conflicts that arise. This is what we are aiming for:\n                      gitGraph\n    accDescr {A Git graph showing the &lt;code&gt;main&lt;/code&gt; branch with the &lt;code&gt;add_plot_script&lt;/code&gt; branch branching off at the second commit of &lt;code&gt;main&lt;/code&gt;.}\n    commit id: 'ed14d18'\n    commit id: '4rtzk8g'\n    branch add_plot_script\n    checkout add_plot_script\n    commit id: 'e56ed99'\n    commit id: 'd7def6a'\n                      Run git pull to fetch the changes from GitHub:\n                      $ git pull origin main\n                      To rebase we run:\n                      $ git rebase main\n                      Successfully rebased and updated refs/heads/add_plot_script.\n                      That’s it! There were no merge conflicts to resolve this time. If you are going to use rebase in this way consider rebasing on a regular basis."
  },
  {
    "objectID": "episodes/aio.html#merge-rebase",
    "href": "episodes/aio.html#merge-rebase",
    "title": "Git & GitHub Working Practices",
    "section": "Merge & Rebase",
    "text": "Merge & Rebase\n                      Stick to one strategy if you can, or rebase before merging. Rebasing a branch with merge commits is difficult to impossible."
  },
  {
    "objectID": "episodes/aio.html#updating-the-remote",
    "href": "episodes/aio.html#updating-the-remote",
    "title": "Git & GitHub Working Practices",
    "section": "Updating the Remote",
    "text": "Updating the Remote\n                      If you are rebasing a feature branch you have already pushed to the GitHub remote you will need to overwrite the remote branch.\n                      \n                      Always check you have updated your local branch from the remote before rebasing.\n                      Always check before pushing to the remote after rebasing that no new commits were added to the remote as these will be lost.\n                      \n                      You can fetch any changes to the remote:\n                      $ git fetch\n                      And inspect the last commit with the log or git show to make sure it’s the commit you expect:\n                      $ git show origin/add_plot_script\n                      If the rebasing was successful and there have been no new commits to the remote feature branch by any collaborators it is safe to push the rebased feature branch to the GitHub remote, overwriting it’s history.\n                      git push --force-with-lease\n                      The --force-with-lease flag will warn you if there are commits on the remote branch you would override by pushing if you forgot to check yourself."
  },
  {
    "objectID": "episodes/aio.html#pulling-a-rebased-branch",
    "href": "episodes/aio.html#pulling-a-rebased-branch",
    "title": "Git & GitHub Working Practices",
    "section": "Pulling a Rebased Branch",
    "text": "Pulling a Rebased Branch\n                      If you have rebased a feature branch and then overwritten the remote branch on GitHub your collaborators may need to pull these changes to their local copies.\n                      If the collaborator already had a copy of your branch from before the rebase; attempting a normal pull will result in a lot of conflicts due to the incompatible histories of the original and the rebased branches.\n                      The collaborator should first switch to the local branch they want to overwrite with the rebased remote version:\n                      $ git switch add_plot_script\n                      Now fetch but don’t attempt to merge the remote branch:\n                      $ git fetch origin add_plot_script\n                      Reset the local branch to match the remote origin:\n                      $ git reset --hard origin/add_plot_script\n                      Now their local branch matches the rebased feature branch from GitHub and everyone’s branches are in sync.\n                      \n                      \n                      \n                      \n                      \n                      Modifying Commit Messages\n                      \n                      git rebase can also be used to modify commit messages.\n                      Look again at the output of the interactive rebase in this lesson. Which keyword lets you edit the commit message?\n                      \n                      Solution (Solution). Edit the commit message:\n                      # r, reword &lt;commit&gt; = use commit, but edit the commit message\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Re-ordering Commits\n                      \n                      In the first example removing the spelling mistake we used the following keywords in our rebase to-do list:\n                      edit 64ac261 Adds in a Python script to plot LFRic data\npick 7053de7 Extends the LFRic data plotting script to plot 2D fields\ndrop 0bb7871 Fixes the axis labels spelling in the LFRic data plotting script\n                      You can also re-order the lines in this file to re-order commits. Look at the possible rebase options again. What other combination of keywords and/or line-reordering would have given us the same result?\n                      \n                      Solution (Solution). \n                      pick 64ac261 Adds in a Python script to plot LFRic data\nfixup 0bb7871 Fixes the axis labels spelling in the LFRic data plotting script\npick 7053de7 Extends the LFRic data plotting script to plot 2D fields\n                      This is one possibility. We move the last commit just underneath the first which introduced the mistake. We use the fixup keyword to fix this change up into the previous commit.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      Rebasing helps keep your git history linear which can be useful when using commands such as git bisect to find the commit that introduced a bug.\n                      Rebasing re-writes your git history. Make a backup of your branch before rebasing. git branch &lt;branch-name&gt;.backup\n                      Use an interactive rebase with the -i flag when you want to tidy your git history.\n                      Use git rebase main to rebase your feature branch onto the HEAD of the main branch.\n                      Always check you have updated your local branch from the remote before rebasing.\n                      Always check before pushing to the remote after rebasing that no new commits were added to the remote as these will be lost, use the --force-with-lease flag with git push to help prevent this.\n                      Use git push --force-with-lease to update the remote branch.\n                      \n                      \n                      \n                      \n                      \n                      Overview\n                      \n                      \n                      \n                      \n                      Questions\n                      \n                      When should I rebase?\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Objectives\n                      \n                      Explain what pre-commit hooks are.\n                      Install and run a pre-commit hook.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Git hooks let you run certain scripts before git actions. In this optional episode we are going to set up a pre-commit hook which runs quality assurance checks on our code before we are allowed to make a commit.\n                      pre-commit is a Python package that makes it easier to set up git hooks. To install it using pip or conda:\n                      \n                      \n                      pip\n                      $ pip install pre-commit\n                      \n                      \n                      conda\n                      $ conda install pre-commit\n                      \n                      \n                      In the git-training-demo we provided an example pre-commit configuration. These pre-commit checks were run as part of your pull requests. We can install the pre-commit hook scripts so they run before we can commit locally:\n                      [git-training-demo]:(main =)$ pre-commit install\n                      pre-commit installed at .git/hooks/pre-commit\n                      It’s good practice to run the pre-commit checks on all your files after installing them.\n                      [git-training-demo]:(main =)$ pre-commit run --all-files\n                      [INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks.                     \n[INFO] Installing environment for https://github.com/pre-commit/pre-commit-hooks.              \n[INFO] Once installed this environment will be reused.                                    \n[INFO] This may take a few minutes...\ndon't commit to branch ...................................................Passed\ncheck for added large files ..............................................Passed\ncheck for case conflicts .................................................Passed\ncheck for merge conflicts ................................................Passed\ncheck toml ...........................................(no files to check)Skipped\ncheck yaml ...............................................................Passed\nfix end of files .........................................................Passed\ntrim trailing whitespace .................................................Passed\n                      The next time the pre-commit scripts run they will re-use the Python environment that was just installed, making the run faster.\n                      The pre-commit.com site has a reference of useful hooks. Your organisation may have their own pre-commit hooks which you can use and or block third party hooks for security.\n                      \n                      \n                      \n                      \n                      \n                      Committing to Main\n                      \n                      With the pre-commit installed try adding any change to the main branch and then run git commit.\n                      What happens with the pre-commit hooks installed?\n                      \n                      Solution (Solution). The pre-commit check for not committing to main fails so git commit wasn’t run. Your changes are still staged.\n                      [git-training-demo]:(main +=)$ git commit -m \"Attempts to commit to main\"\n                      don't commit to branch...................................................Failed\n- hook id: no-commit-to-branch\n- exit code: 1\ncheck for added large files..............................................Passed\ncheck for case conflicts.................................................Passed\ncheck for merge conflicts................................................Passed\ncheck toml...........................................(no files to check)Skipped\ncheck yaml...............................................................Passed\nfix end of files.........................................................Passed\ntrim trailing whitespace.................................................Passed\n                      To move the staged changes to a new branch use git switch:\n                      [git-training-demo]:(main +=)$ git switch -c &lt;branch-name&gt;\n                      Switched to a new branch 'challenge'\n                      [git-training-demo]:(challenge +)$ git status\n                      On branch challenge\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    modified:   .pre-commit-config.yaml\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      pre-commit checks help prevent accidental commits to main and provide an extra layer of quality assurance."
  },
  {
    "objectID": "episodes/aio.html#footnotes",
    "href": "episodes/aio.html#footnotes",
    "title": "Git & GitHub Working Practices",
    "section": "Footnotes",
    "text": "Footnotes\n                      \n                      \n                      The GitHub documentation has more information on permissions for a repository on a personal account.↩︎\n                      The GitHub Documentation has more information on the different permission levels for repositories in organisations.↩︎\n                      You can also open a draft PR and then edit the top comment to mark the checklist tasks as completed.↩︎\n                      The GitHub Documentation has more information on automatically assigning reviewers.↩︎\n                      If the repository is private collaborators will need to be given access to see the repository and create a fork. The same is true for private repositories in organisations.↩︎\n                      The GitHub Documentation has more information on linking PRs to Issues.↩︎"
  },
  {
    "objectID": "episodes/Break.html",
    "href": "episodes/Break.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View\n                \n                      \n            \n          \n          \n        \n        \n          \n            \n              \n              Menu\n            \n            \n              \n            \n            \n              Git & GitHub Working Practices\n            \n            \n              \n            \n            \n              \n                \n                  \n                    Git & GitHub Working Practices\n                  \n                \n                \n                \n                  \n                  Setup\n                \n                        \n                  Key Points\n                \n                \n                  Glossary\n                \n                \n                  Learner Profiles\n                \n                                  \n                    \n                      More \n                    \n                    \n                      \n\n                      Git Cheatsheets for Quick Reference\n                      Discussion\n                      FCM vs Git Cheat Sheet            \n                  \n                      \n            \n            \n            \n            \n              \n                \n                \n              \n              \n                \n              \n            \n          \n        \n\n        \n          Git & GitHub Working Practices\n        \n\n        \n          \n            0%\n          \n          \n            \n            \n          \n            \n      \n        \n          \n            \n              \n                \n              \n              \n                \n                  \n                    \n                      \n                        \n                          \n                        \n                        Toggle Theme\n                      \n                      \n                        \n                          \n                            \n                              \n                            \n                            Light\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Dark\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Auto\n                            \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                                            \n                            \n                               Learner View\n                            \n                          \n                          \n                            \n                              Instructor View\n                            \n                          \n                                          \n                      \n                    \n                  \n                  \n                  \n                \n\n                \n                  \n\n                    \n                      ../EPISODES\n                    \n                    \n\n                      \n                        \n\n                                \n                                  \n                                    \n                                      Summary and Setup\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      1. Repository Access\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      2. Issues\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      3. Branching Models\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      4. Feature Branch Model\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      5. Review\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      6. Break\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      7. Forks\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      8. Conflicts\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      9. History\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      10. End\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      11. 'Rebasing'\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      12. 'Pre-commit'\n                                    \n                                  \n                                              \n                    \n                  \n                \n                \n\n                \n                          \n                    \n                      \n                        \n                          RESOURCES\n                        \n                      \n                      \n                        \n                          \n                            \n                            \n                              \n                              Setup\n                            \n                                                \n                              Key Points\n                            \n                            \n                              Glossary\n                            \n                            \n                              Learner Profiles\n                            \n                                                \n                          \n                        \n                      \n                    \n                  \n                  \n                  \n                  \n                  \n\n                  \n                              \n                \n              \n            \n          \n                        You’ve now used the Feature Branch model to:\n                                               \n                                               Open an Issue describing the feature or bug\n                                               Clone a repository\n                                               Create a branch to develop your changes on\n                                               Make changes to your working copy\n                                               Open a Pull Request\n                                               Respond to review\n                                               Update your local copy and tidy up your branches\n                                               \n                                               sequenceDiagram\n    accDescr {A sequence diagram showing the steps for the branching model.}\n    autonumber\n    participant GHM as origin main\n    participant GHF as origin feature\n    participant M as main\n    GHM --&gt;&gt; GHM: #f\n    Note over GHM: Open an Issue for the change\n    GHM --&gt;&gt; M: #f\n    Note right of GHM: First time: git clone&lt;br/&gt;Then: git pull\n    create participant F as feature\n    M -&gt;&gt; F: Create a feature branch:&lt;br/&gt;git switch -c feature\n    loop\n        F -&gt;&gt; F: #f\n        Note over F: Develop changes:&lt;br/&gt;git add&lt;br/&gt;git commit\n    end\n    F --&gt;&gt; GHF: #f\n    Note left of F: Push to GitHub: git push&lt;br/&gt;The first push creates origin feature!\n    destroy GHF\n    GHF -&gt;&gt; GHM: #f\n    Note left of GHF: Pull Request and then Merge.&lt;br/&gt;Delete origin feature branch.\n    GHM --&gt;&gt; M: #f\n    Note right of GHM: git pull\n    Note over F: Delete branch:&lt;br/&gt;git branch -D feature\n    box GitHub Remote\n    participant GHM\n    participant GHF\n    end\n    box Local\n    participant M\n    participant F\n    end\n                                               Take a break - get up and move about.\n                                               \n                                               \n      \n      \t\t\n      \t\t\t\n      \t\t\t\n              This lesson is subject to the &lt;(Code of Conduct)&gt;\n              Edit on GitHub\n              | Contributing\n              | Source\n      \t\t\t\tCite | Contact | About\n      \t\t\t\n      \t\t\t\n                      Materials licensed under &lt;({license})&gt; by the authors\n                      Template licensed under &lt;(CC-BY 4.0)&gt; by {template_authors}\n              Built with Quarto"
  },
  {
    "objectID": "episodes/08-rebase.html",
    "href": "episodes/08-rebase.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View"
  },
  {
    "objectID": "episodes/08-rebase.html#tidying-your-commit-history",
    "href": "episodes/08-rebase.html#tidying-your-commit-history",
    "title": "Git & GitHub Working Practices",
    "section": "Tidying your Commit History",
    "text": "Tidying your Commit History\n                      Consider the following scenario. You want to add a plotting script to the git-training-demo repository. You make a branch for the feature:\n                      $ git switch -c add_plot_script main\n                      Switched to branch 'add_plot_script'\n                      And over the course of development you make three commits to the file plot_lfric.py. Use the commands in each tab make the same commits to your repository:\n                      \n                      \n                      Commit 1\n                      $ nano plot_lfric.py\n$ cat plot_lfric.py\n                      # pretnd there is code here!\n                      $ git add plot_lfric.py\n$ git commit -m \"Adds in a Python script to plot LFRic data\"\n                      [add_plot_script 64ac261] Adds in a Python script to plot LFRic data\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 plot_lfric.py\n                      \n                      \n                      Commit 2\n                      $ nano plot_lfric.py\n$ cat plot_lfric.py\n                      # pretnd there is code here!\n# more Python\n                      $ git commit -am \"Extends the LFRic data plotting script to plot 2D fields\"\n                      [add_plot_script 7053de7] Extends the LFRic data plotting script to plot 2D fields\n 1 file changed, 1 insertion(+)\n                      \n                      \n                      Commit 3\n                      $ nano plot_lfric.py\n$ cat plot_lfric.py\n                      # pretend there is code here!\n# more Python\n                      $ git commit -am \"Fixes the axis labels spelling in the LFRic data plotting script\"\n                      [add_plot_script 0bb7871] Fixes the axis labels spelling in the LFRic data plotting script\n 1 file changed, 1 insertion(+)\n                      \n                      \n                      Before you push to the remote and open a PR you check your git history. The git history now looks something like this:\n                      gitGraph\n    accDescr {A Git graph showing the &lt;code&gt;main&lt;/code&gt; branch with the &lt;code&gt;add_plot_script&lt;/code&gt; branch branching off at the first commit of &lt;code&gt;main&lt;/code&gt;.}\n    commit id: 'ed14d18'\n    branch add_plot_script\n    checkout add_plot_script\n    commit id: '64ac261'\n    commit id: '7053de7'\n    commit id: '0bb7871'\n                      We can also visualise these changes with git log:\n                      $ git log --decorate --oneline --graph\n                      * 0bb7871 (HEAD -&gt; add_plot_script) Fixes the axis labels spelling in the LFRic data plotting script\n* 7053de7 Extends the LFRic data plotting script to plot 2D fields\n* 64ac261 Adds in a Python script to plot LFRic data\n* ed14d18 (origin/main) Adds Robert FitzRoy as an author (#8)\n                      You realise that perhaps the spelling fix in the third commit should have been a correction to the first commit which added in the script. We can use rebase to re-write our history and combine these two commits."
  },
  {
    "objectID": "episodes/08-rebase.html#backup-your-branch",
    "href": "episodes/08-rebase.html#backup-your-branch",
    "title": "Git & GitHub Working Practices",
    "section": "Backup your Branch",
    "text": "Backup your Branch\n                      It is a good idea to create a backup of your feature branch just in case something goes wrong during the rebase:\n                      $ git branch add_plot_script.backup\n                      If at anytime you want to restore the branch from your backup switch to the backup:\n                      $ git switch add_plot_script.backup\n                      Delete the branch where rebasing was attempted:\n                      $ git branch -D add_plot_script\n                      Re-create the original branch while still on the backup branch:\n                      $ git switch -c add_plot_script"
  },
  {
    "objectID": "episodes/08-rebase.html#aborting-a-rebase",
    "href": "episodes/08-rebase.html#aborting-a-rebase",
    "title": "Git & GitHub Working Practices",
    "section": "Aborting a Rebase",
    "text": "Aborting a Rebase\n                      If you want to cancel the rebase at the above stage either do nothing to the file or delete all the commit lines.\n                      After you save and close the file, if your rebase has conflicts, you can abort at anytime using:\n                      $ git rebase --abort"
  },
  {
    "objectID": "episodes/08-rebase.html#updating-a-branch",
    "href": "episodes/08-rebase.html#updating-a-branch",
    "title": "Git & GitHub Working Practices",
    "section": "Updating a Branch",
    "text": "Updating a Branch\n                      You can also use rebase to move your changes to branch off the HEAD of main. While we rebased our feature branch another PR was merged with main:\n                      gitGraph\n    accDescr {A Git graph showing the &lt;code&gt;main&lt;/code&gt; branch with the &lt;code&gt;add_plot_script&lt;/code&gt; branch branching off at the first commit of &lt;code&gt;main&lt;/code&gt;.}\n    commit id: 'ed14d18'\n    branch add_plot_script\n    checkout add_plot_script\n    commit id: 'e56ed99'\n    commit id: 'd7def6a'\n    checkout main\n    commit id: '4rtzk8g'\n                      We can use rebasing to move our feature branch so it branches off the HEAD of main, fixing any conflicts that arise. This is what we are aiming for:\n                      gitGraph\n    accDescr {A Git graph showing the &lt;code&gt;main&lt;/code&gt; branch with the &lt;code&gt;add_plot_script&lt;/code&gt; branch branching off at the second commit of &lt;code&gt;main&lt;/code&gt;.}\n    commit id: 'ed14d18'\n    commit id: '4rtzk8g'\n    branch add_plot_script\n    checkout add_plot_script\n    commit id: 'e56ed99'\n    commit id: 'd7def6a'\n                      Run git pull to fetch the changes from GitHub:\n                      $ git pull origin main\n                      To rebase we run:\n                      $ git rebase main\n                      Successfully rebased and updated refs/heads/add_plot_script.\n                      That’s it! There were no merge conflicts to resolve this time. If you are going to use rebase in this way consider rebasing on a regular basis."
  },
  {
    "objectID": "episodes/08-rebase.html#merge-rebase",
    "href": "episodes/08-rebase.html#merge-rebase",
    "title": "Git & GitHub Working Practices",
    "section": "Merge & Rebase",
    "text": "Merge & Rebase\n                      Stick to one strategy if you can, or rebase before merging. Rebasing a branch with merge commits is difficult to impossible."
  },
  {
    "objectID": "episodes/08-rebase.html#updating-the-remote",
    "href": "episodes/08-rebase.html#updating-the-remote",
    "title": "Git & GitHub Working Practices",
    "section": "Updating the Remote",
    "text": "Updating the Remote\n                      If you are rebasing a feature branch you have already pushed to the GitHub remote you will need to overwrite the remote branch.\n                      \n                      Always check you have updated your local branch from the remote before rebasing.\n                      Always check before pushing to the remote after rebasing that no new commits were added to the remote as these will be lost.\n                      \n                      You can fetch any changes to the remote:\n                      $ git fetch\n                      And inspect the last commit with the log or git show to make sure it’s the commit you expect:\n                      $ git show origin/add_plot_script\n                      If the rebasing was successful and there have been no new commits to the remote feature branch by any collaborators it is safe to push the rebased feature branch to the GitHub remote, overwriting it’s history.\n                      git push --force-with-lease\n                      The --force-with-lease flag will warn you if there are commits on the remote branch you would override by pushing if you forgot to check yourself."
  },
  {
    "objectID": "episodes/08-rebase.html#pulling-a-rebased-branch",
    "href": "episodes/08-rebase.html#pulling-a-rebased-branch",
    "title": "Git & GitHub Working Practices",
    "section": "Pulling a Rebased Branch",
    "text": "Pulling a Rebased Branch\n                      If you have rebased a feature branch and then overwritten the remote branch on GitHub your collaborators may need to pull these changes to their local copies.\n                      If the collaborator already had a copy of your branch from before the rebase; attempting a normal pull will result in a lot of conflicts due to the incompatible histories of the original and the rebased branches.\n                      The collaborator should first switch to the local branch they want to overwrite with the rebased remote version:\n                      $ git switch add_plot_script\n                      Now fetch but don’t attempt to merge the remote branch:\n                      $ git fetch origin add_plot_script\n                      Reset the local branch to match the remote origin:\n                      $ git reset --hard origin/add_plot_script\n                      Now their local branch matches the rebased feature branch from GitHub and everyone’s branches are in sync.\n                      \n                      \n                      \n                      \n                      \n                      Modifying Commit Messages\n                      \n                      git rebase can also be used to modify commit messages.\n                      Look again at the output of the interactive rebase in this lesson. Which keyword lets you edit the commit message?\n                      \n                      Solution (Solution). Edit the commit message:\n                      # r, reword &lt;commit&gt; = use commit, but edit the commit message\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Re-ordering Commits\n                      \n                      In the first example removing the spelling mistake we used the following keywords in our rebase to-do list:\n                      edit 64ac261 Adds in a Python script to plot LFRic data\npick 7053de7 Extends the LFRic data plotting script to plot 2D fields\ndrop 0bb7871 Fixes the axis labels spelling in the LFRic data plotting script\n                      You can also re-order the lines in this file to re-order commits. Look at the possible rebase options again. What other combination of keywords and/or line-reordering would have given us the same result?\n                      \n                      Solution (Solution). \n                      pick 64ac261 Adds in a Python script to plot LFRic data\nfixup 0bb7871 Fixes the axis labels spelling in the LFRic data plotting script\npick 7053de7 Extends the LFRic data plotting script to plot 2D fields\n                      This is one possibility. We move the last commit just underneath the first which introduced the mistake. We use the fixup keyword to fix this change up into the previous commit.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      Rebasing helps keep your git history linear which can be useful when using commands such as git bisect to find the commit that introduced a bug.\n                      Rebasing re-writes your git history. Make a backup of your branch before rebasing. git branch &lt;branch-name&gt;.backup\n                      Use an interactive rebase with the -i flag when you want to tidy your git history.\n                      Use git rebase main to rebase your feature branch onto the HEAD of the main branch.\n                      Always check you have updated your local branch from the remote before rebasing.\n                      Always check before pushing to the remote after rebasing that no new commits were added to the remote as these will be lost, use the --force-with-lease flag with git push to help prevent this.\n                      Use git push --force-with-lease to update the remote branch."
  },
  {
    "objectID": "episodes/06-conflict.html",
    "href": "episodes/06-conflict.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View"
  },
  {
    "objectID": "episodes/06-conflict.html#open-a-pull-request",
    "href": "episodes/06-conflict.html#open-a-pull-request",
    "title": "Git & GitHub Working Practices",
    "section": "Open a Pull Request",
    "text": "Open a Pull Request\n                      Head back to your fork on GitHub and open a PR to contribute your changes upstream to the main git-training-demo repository. Fill out the template like you did in the previous episode.\n                      At the bottom of your PR GitHub is telling us This branch has conflicts that must be resolved and the conflicting file is CITATION.cff.\n                      Go to the main git-training-demo repositories code tab and look at the contents of CITATION.cff:\n                      cff-version: 1.2.0\nmessage: \"Met Office Colleagues and Partners\"\nauthors:\n- family-names: \"Theodorakis\"\n  given-names: \"Dimitrios\"\n  orcid: \"https://orcid.org/0000-0001-9288-1332\"\n- family-names: \"Hogan\"\n  given-names: \"Emma\"\ntitle: \"Met Office Git Training Demo\"\nversion: 2.0.4\ndoi: 10.4321/zenodo.1234\ndate-released: 2024-09-23\nurl: \"https://github.com/MetOffice/git-training-demo\"\n                      Someone else has added their name before our PR could be merged. These changes now conflict with the one you made.\n                      \n                      \n                      \n                        \n                        \n                        Practising By Yourself\n                        \n                      \n                      \n                      \n                      If you’re working through this lesson on your own, you won’t see a conflict. You should still follow the materials to learn what to do when you encounter a conflict.\n                      \n                      \n                      \n                      \n                      \n                      Blame\n                      GitHub lets you see who made changes to the file you are looking at in the Code viewer. Click on the Blame button:\n                      \n                      The image above shows blame on the weather repositories forecast.md file. The far left shows how long ago the commit was that changed those lines. Then the commit message is displayed before the file contents. Click on the little page icon after a commit message to see previous commits which altered the same lines. Try using blame on the CITATION.cff file to see who added the conflicting change.\n                      \n                      \n                      Compare changes\n                      In the git-novice lesson we learnt how to diff between commits on the same branch. You can also look at diffs between branches even if they are on a different fork using GitHub.\n                      To see a difference for a repository add /compare to the end of the repository url.\n                      \n                      Navigate to: https://github.com/MetOffice/git-training-demo/compare/, and click on the compare across forks link.\n                      Click on the head repository dropdown and find your fork.\n                      Click on the compare dropdown and select your feature branch.\n                      \n                      A diff should appear comparing your fork’s feature branch with the upstream repositories main branch."
  },
  {
    "objectID": "episodes/06-conflict.html#resolving-conflicts",
    "href": "episodes/06-conflict.html#resolving-conflicts",
    "title": "Git & GitHub Working Practices",
    "section": "Resolving Conflicts",
    "text": "Resolving Conflicts\n                      We’re going to resolve the conflict by merging in the main branch into our feature branch 7_add-citation-fitzroy:\n                      gitGraph\n    accDescr {A git graph showing the &lt;code&gt;main&lt;/code&gt; branch being merged\n    into the &lt;code&gt;7_add-citation-fitzroy&lt;/code&gt; branch to resolve merge conflicts.}\n    commit id: 'cdb7fa6'\n    branch 7_add-citation-fitzroy\n    commit id: 'a3c5e13 Adds Robert Fitzroy as an author'\n    checkout main\n    commit id: 's7dja9o'\n    checkout 7_add-citation-fitzroy\n    merge main\n                      First we need to make sure our fork’s main branch is in sync with the upstream repository. Navigate to your fork on GitHub and click on the Sync fork button.\n                      In your local copy of your fork, update the main branch:\n                      $ git switch main\n$ git pull\n                      Switch back to the feature branch:\n                      $ git switch 7_add-citation-fitzroy\n                      Switched to branch '7_add-citation-fitzroy'\n                      Merge in the main branch:\n                      $ git merge main\n                      Auto-merging CITATION.cff\nCONFLICT (content): Merge conflict in CITATION.cff\nAutomatic merge failed; fix conflicts and then commit the result.\n                      Git is warning us about the conflict. We are still merging, if you run git status you will see:\n                      $ git status\n                      On branch 7_add-citation-fitzroy\nYour branch is up to date with 'origin/7_add-citation-fitzroy'.\n\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n  (use \"git merge --abort\" to abort the merge)\n\nUnmerged paths:\n  (use \"git add &lt;file&gt;...\" to mark resolution)\n    both modified:   CITATION.cff\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n                      The message tells us both modified the CITATION.cff file since both main and our feature branch modified this file.\n                      If we look at the CITATION.cff file now:\n                      $ cat CITATION.cff\n                      cff-version: 1.2.0\nmessage: \"Met Office Colleagues and Partners\"\nauthors:\n- family-names: \"Theodorakis\"\n  given-names: \"Dimitrios\"\n  orcid: \"https://orcid.org/0000-0001-9288-1332\"\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n- family-names: \"FitzRoy\"\n  given-names: \"Robert\"\n=======\n- family-names: \"Hogan\"\n  given-names: \"Emma\"\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; dabb4c8c450e8475aee9b14b4383acc99f42af1d\ntitle: \"Met Office Git Training Demo\"\nversion: 2.0.4\ndoi: 10.4321/zenodo.1234\ndate-released: 2024-09-23\nurl: \"https://github.com/MetOffice/git-training-demo\"\n                      Our change is preceded by &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD. Git has then inserted ======= as a separator between the conflicting changes and marked the end of the content downloaded from GitHub with &gt;&gt;&gt;&gt;&gt;&gt;&gt;. (The string of letters and digits after that marker identifies the commit we’ve just downloaded.)\n                      It is now up to us to edit this file to remove these markers and reconcile the changes. We can do anything we want: keep the change made in the local repository, keep the change made in the remote repository, write something new to replace both, or get rid of the change entirely. Let’s replace both so that the file looks like this:\n                      $ cat CITATION.cff\n                      cff-version: 1.2.0\nmessage: \"Met Office Colleagues and Partners\"\nauthors:\n- family-names: \"Theodorakis\"\n  given-names: \"Dimitrios\"\n  orcid: \"https://orcid.org/0000-0001-9288-1332\"\n- family-names: \"Hogan\"\n  given-names: \"Emma\"\n- family-names: \"FitzRoy\"\n  given-names: \"Robert\"\ntitle: \"Met Office Git Training Demo\"\nversion: 2.0.4\ndoi: 10.4321/zenodo.1234\ndate-released: 2024-09-23\nurl: \"https://github.com/MetOffice/git-training-demo\"\n                      To finish merging, we add CITATION.cff to the changes being made by the merge and then commit:\n                      $ git add CITATION.cff \n$ git status\n                      On branch 7_add-citation-fitzroy\nAll conflicts fixed but you are still merging.\n  (use \"git commit\" to conclude merge)\n\nChanges to be committed:\n\n    modified:   CITATION.cff\n                      $ git commit\n                      [7_add-citation-fitzroy 312c561] Merge branch 'main' into 7_add-citation-fitzroy\n                      Now we can push our changes to GitHub:\n                      $ git push\n                      Enumerating objects: 7, done.\nCounting objects: 100% (7/7), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 385 bytes | 128.00 KiB/s, done.\nTotal 3 (delta 2), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (2/2), completed with 2 local objects.\nTo github.com:mo-fitzroy/git-training-demo.git\n   a3c5e13..312c561  7_add-citation-fitzroy -&gt; 7_add-citation-fitzroy\n                      Your PR on GitHub should now be ready to merge, after review of course."
  },
  {
    "objectID": "episodes/06-conflict.html#avoiding-conflict",
    "href": "episodes/06-conflict.html#avoiding-conflict",
    "title": "Git & GitHub Working Practices",
    "section": "Avoiding Conflict",
    "text": "Avoiding Conflict\n                      Git’s ability to resolve conflicts is very useful, but conflict resolution costs time and effort, and can introduce errors if conflicts are not resolved correctly. If you find yourself resolving a lot of conflicts in a project, consider these technical approaches to reducing them:\n                      \n                      Pull from upstream more frequently, especially before starting new work\n                      Use topic branches to segregate work, merging to main via a PR when complete\n                      Make smaller more atomic commits\n                      Push your work when it is done and encourage your team to do the same to reduce work in progress and, by extension, the chance of having conflicts\n                      Where logically appropriate, break large files into smaller ones so that it is less likely that two authors will alter the same file simultaneously\n                      \n                      Conflicts can also be minimized with project management strategies:\n                      \n                      Clarify who is responsible for what areas with your collaborators\n                      Discuss what order tasks should be carried out in with your collaborators so that tasks expected to change the same lines won’t be worked on simultaneously\n                      If the conflicts are stylistic churn (e.g. tabs vs. spaces), establish a project convention that is governing and use code style tools (e.g. htmltidy, perltidy, rubocop, etc.) to enforce, if necessary\n                      \n                      \n                      \n                      \n                      \n                      \n                      Conflicts on Non-textual files\n                      \n                      What does Git do when there is a conflict in an image or some other non-textual file that is stored in version control?\n                      \n                      Solution (Solution). Let’s try it with your weather repository. Suppose you take a picture of the television forecast and call it forecast.jpg. Jimmy has already created a feature branch to add the image in.\n                      $ git switch add_forecast_image\n                      If you do not have an image file of forecast available, you can create a dummy binary file like this:\n                      $ head --bytes 1024 /dev/urandom &gt; forecast.jpg\n$ ls -lh forecast.jpg\n                      -rw-r--r-- 1 mo-eormerod 57095 1.0K Mar  8 20:24 forecast.jpg\n                      ls shows us that this created a 1-kilobyte file. It is full of random bytes read from the special file, /dev/urandom.\n                      Now, suppose you add forecast.jpg to your repository:\n                      $ git add forecast.jpg\n$ git commit -m \"Add picture of forecast\"\n                      [add_forecast_image 8e4115c] Add picture of forecast\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 forecast.jpg\n                      Suppose that Jimmy has added a similar picture in the meantime. His is a picture of a forecast from Chile, but it is also called forecast.jpg. When you try to push, you get a familiar message:\n                      $ git push\n                      To https://github.com/mo-eormerod/weather.git\n ! [rejected]        add_forecast_image -&gt; add_forecast_image (fetch first)\nerror: failed to push some refs to 'https://github.com/mo-eormerod/weather.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n                      We’ve learned that we must pull first and resolve any conflicts:\n                      $ git pull\n                      When there is a conflict on an image or other binary file, git prints a message like this:\n                      $ git pull\nremote: Counting objects: 3, done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 0 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/mo-eormerod/weather.git\n * branch            add_forecast_image     -&gt; FETCH_HEAD\n   6a67967..439dc8c  add_forecast_image     -&gt; origin/add_forecast_image\nwarning: Cannot merge binary files: forecast.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\nAuto-merging forecast.jpg\nCONFLICT (add/add): Merge conflict in forecast.jpg\nAutomatic merge failed; fix conflicts and then commit the result.\n                      The conflict message here is mostly the same as it was for forecast.md, but there is one key additional line:\n                      warning: Cannot merge binary files: forecast.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)\n                      Git cannot automatically insert conflict markers into an image as it does for text files. So, instead of editing the image file, we must check out the version we want to keep. Then we can add and commit this version.\n                      On the key line above, Git has conveniently given us commit identifiers for the two versions of forecast.jpg. Our version is HEAD, and Jimmy’s version is 439dc8c0.... If we want to use our version, we can use git checkout:\n                      $ git checkout HEAD forecast.jpg\n$ git add forecast.jpg\n$ git commit -m \"Use image of just the local forecast\"\n                      [add_forecast_image 21032c3] Use image of just the local forecast\n                      If instead we want to use Jimmy’s version, we can use git checkout with Jimmy’s commit identifier, 439dc8c0:\n                      $ git checkout 439dc8c0 forecast.jpg\n$ git add forecast.jpg\n$ git commit -m \"Use image of just the local forecast\"\n                      [add_forecast_image da21b34] Use image of forecast with nachos instead of just forecast\n                      We can also keep both images. The catch is that we cannot keep them under the same name. But, we can check out each version in succession and rename it, then add the renamed versions. First, check out each image and rename it:\n                      $ git checkout HEAD forecast.jpg\n$ git mv forecast.jpg forecast-only.jpg\n$ git checkout 439dc8c0 forecast.jpg\n$ mv forecast.jpg forecast-chile.jpg\n                      Then, remove the old forecast.jpg and add the two new files:\n                      $ git rm forecast.jpg\n$ git add forecast-only.jpg\n$ git add forecast-chile.jpg\n$ git commit -m \"Use two images: local forecast and Chile forecast\"\n                      [add_forecast_image 94ae08c] Use two images: local forecast and Chile forecast\n 2 files changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 forecast-chile.jpg\n rename forecast.jpg =&gt; forecast-only.jpg (100%)\n                      Now both images of forecast are checked into the repository, and forecast.jpg no longer exists.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      Conflicts occur when two or more people change the same lines of the same file.\n                      The version control system does not allow people to overwrite each other’s changes blindly, but highlights conflicts so that they can be resolved."
  },
  {
    "objectID": "episodes/04-review.html",
    "href": "episodes/04-review.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View"
  },
  {
    "objectID": "episodes/04-review.html#reviewing-changes",
    "href": "episodes/04-review.html#reviewing-changes",
    "title": "Git & GitHub Working Practices",
    "section": "Reviewing Changes",
    "text": "Reviewing Changes\n                      You can add general science and code review comments in the Conversation tab. To review specific files go to the Files changed tab:\n                      \n                      This tab shows a diff (difference) between your feature branch, 1_favourite_cloud, and the target branch, main. Your diff might look different, to swap between Unified and Split view click on the cog dropdown:\n                      \n                      The default view shows a diff of the source code. We’ll stick with source code diffs for this lesson but you can change the view to rich diffs to display rendered changes to Markdown or Jupyter Notebook files. Click on the file icon on the far right of a diff for the file to swap to a rich diff:\n                      \n                      To start a review you can click on the green Review changes button:\n                      \n                      Normally it is useful to review each file one at a time and make comments inline first before adding general comments. Close the review popup and hover next to a line number until it becomes highlighted. Click on the line to add an inline comment:\n                      \n                      You can make suggested changes using inline comments. Click on the file icon or press Ctrl+g:\n                      \n                      Add in a suggested change for your review. Click on the green Start a review button. Now click on the green button in the top right which says Finish your review or Review Changes, add a comment, and select Request changes. When you’re finished click the green Submit review button.\n                      \n                      The PRs Conversation tab now looks like this:"
  },
  {
    "objectID": "episodes/04-review.html#responding-to-review",
    "href": "episodes/04-review.html#responding-to-review",
    "title": "Git & GitHub Working Practices",
    "section": "Responding to Review",
    "text": "Responding to Review\n                      Now you will respond to the review on the PR that you opened.\n                      You can see merging is blocked because our reviewer has requested changes. You also have the option to commit the suggested change to your branch directly via the PR. Click on the Commit suggestion button. In the popup add a description then click on Commit changes:\n                      \n                      You could have also committed the suggested changes to your feature branch using your local copy, pushed the changes to GitHub and then marked the conversation with the suggested change as resolved.\n                      Re-request a review by clicking on the two arrows forming a circle next to the reviewers name at the top of the PR."
  },
  {
    "objectID": "episodes/04-review.html#help-some-checks-have-failed",
    "href": "episodes/04-review.html#help-some-checks-have-failed",
    "title": "Git & GitHub Working Practices",
    "section": "Help: Some checks have failed",
    "text": "Help: Some checks have failed\n                      Since our PR is running automatic checks it’s best not to make large changes by accepting suggestions this way. Instead make changes to your feature branch using your local copy, run the checks locally, push the changes to GitHub and then mark the conversations with the suggested changes as resolved. You can add a commit hash in the conversation which will automatically link to the commit responding to any review comments."
  },
  {
    "objectID": "episodes/04-review.html#approving-changes",
    "href": "episodes/04-review.html#approving-changes",
    "title": "Git & GitHub Working Practices",
    "section": "Approving Changes",
    "text": "Approving Changes\n                      Head back to your partners PR, if they re-requested a review you will have received another notification.\n                      The Conversation tab should update to show the suggestion as Outdated because it has been resolved. It also gives you the option to view the new changes since your last review.\n                      \n                      Click on the View changes button. If you are happy that your requested changes have been addressed then you can approve the PR:\n                      \n                      Swap back to the Conversations tab. The PR is now ready to merge and has no conflicts with the base (main in this case) branch. Click Squash and merge; don’t forget to move the PR number to the start of the commit message like you did in the Version Control with Git lesson:\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Who presses the merge button?\n                      \n                      \n                      \n                      In this case both the contributor and reviewer have write access to the repository. This means they can both merge and close the PR and it is up to your team to decide whether the contributor or the reviewer does the merge as part of your working practices.\n                      When using the forking model later the reviewer always merges the PR as the contributor will not have sufficient permissions.\n                      \n                      \n                      When your PR is merged the Conversations tab will show:\n                      \n                      You can now delete the branch from GitHub by pressing the Delete branch button. Some repositories will be automatically set up to delete the feature branch after a PR is successfully merged.\n                      If you head back to the main page of the git-training-demo repository you will see your new file in the code view for the main branch. The commit message for the PR merge is shown next to it. If you hover over the PR number (in this case #2) a popup will appear with details of the merged PR. Click on the number to take you to the closed PR.\n                      \n                      Head over to the repositories Issues tab. Check that your Issue for adding your favourite cloud file was closed when you merged the PR.\n                      \n                      \n                      \n                      \n                      \n                      Local Cleanup\n                      \n                      In the git-novice lesson you learnt how to pull changes and clean up your branches after merging a PR.\n                      You can now:\n                      \n                      Update your local copy of the git-training-demo repository\n                      Delete any branches that are no longer necessary\n                      \n                      \n                      Solution (Solution). \n                      \n                      Update your local copy of the git-training-demo repository\n                      \n                      $ git switch main\n$ git pull\n                      remote: Enumerating objects: 4, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0 (from 0)\nUnpacking objects: 100% (3/3), 1.07 KiB | 20.00 KiB/s, done.\nFrom github.com:metoffice/git-training-demo\n   39720d8..9bdd3b8  main       -&gt; origin/main\nUpdating 39720d8..9bdd3b8\nFast-forward\n cloud-mo-fitzroy.md | 3 +++\n 1 file changed, 3 insertions(+)\n create mode 100644 cloud-mo-fitzroy.md\n                      \n                      Delete any branches that are no longer necessary\n                      \n                      $ git remote prune origin\n                      Pruning origin\nURL: git@github.com:metoffice/git-training-demo.git\n * [pruned] origin/1_favourite_cloud\n                      $ git branch -D 1_favourite_cloud\n                      Deleted branch 1_favourite_cloud (was b7f26e6).\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      A Pull Request (PR) is where your code and science review takes place.\n                      General review comments go in the PR Conversations tab.\n                      View a diff of the changes in the PR Files changed tab.\n                      Make inline comments or suggested changes in the Files changed tab using the diff."
  },
  {
    "objectID": "episodes/02-branching.html",
    "href": "episodes/02-branching.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View"
  },
  {
    "objectID": "episodes/02-branching.html#git-branching-models",
    "href": "episodes/02-branching.html#git-branching-models",
    "title": "Git & GitHub Working Practices",
    "section": "Git Branching Models",
    "text": "Git Branching Models\n                      Some version control systems are more geared towards certain branching models. When using git you have a wide range of models to pick from. This means the first rule when collaborating using git is: “Talk about your branching model.”\n                      A repository’s CONTRIBUTING file may include details of their branching model. This information might also be in a repository’s README file. If in doubt ask! You can also look at how other people appear to be contributing to the repository.\n                      Below are a few models:\n                      \n                      \n                      Feature Branch\n                      In this model every small change or “feature” gets its own branch where the developers make changes. Once the feature is done, they submit a pull request and merge it into the main branch after review. Feature branches should be relatively short-lived.\n                      \n                      Pros\n                      \n                      Each feature is developed away from main so you don’t affect production code\n                      Multiple features can be developed in parallel feature branches\n                      It’s a simple model that’s easy for those new to git and your project\n                      Easy to set up with continuous integration testing and deployment\n                      \n                      \n                      \n                      Cons\n                      \n                      If you don’t regularly merge changes to main into your feature branch it can become outdated, leading to merge conflicts\n                      You may struggle if you need to maintain multiple production versions simultaneously in the same repository\n                      \n                      The Feature Branch model is sometimes called GitHub Flow.\n                      ---\nconfig:\n  gitGraph:\n    showCommitLabel: false\n---\n    gitGraph\n        accDescr {A git graph showing four branches including the default\n        &lt;code&gt;main&lt;/code&gt; branch.\n        Each circle is a commit.\n        A circle with an outline but no fill colour is a merge commit \n        where one branch has been merged into another.\n        The two feature branches and the &lt;code&gt;bug_fix&lt;/code&gt; branch \n        all branch off of &lt;code&gt;main&lt;/code&gt; at the same commit.\n        The &lt;code&gt;bug_fix&lt;/code&gt; and &lt;code&gt;small_feature&lt;/code&gt; branches\n        are merged back into &lt;code&gt;main&lt;/code&gt; after\n        being developed on their branches.\n        The &lt;code&gt;large_feature&lt;/code&gt; branch merges in the\n        changes to &lt;code&gt;main&lt;/code&gt; to fix any conflicts\n        before the feature is ready to be merged\n        back into the &lt;code&gt;main&lt;/code&gt; branch via a pull request.}\n        commit\n        branch bug_fix\n        checkout main\n        branch small_feature\n        checkout main\n        branch large_feature\n        checkout bug_fix\n        commit\n        checkout large_feature\n        commit\n        checkout main\n        merge bug_fix\n        checkout small_feature\n        commit\n        checkout large_feature\n        commit\n        checkout small_feature\n        commit\n        checkout main\n        merge small_feature\n        checkout large_feature\n        commit\n        merge main\n        checkout main\n        merge large_feature\n                      \n                      \n                      \n                      \n                      Forking\n                      In this model you make a fork (copy) of the whole repository you want to contribute to on GitHub in your personal space. You develop your changes using this fork. When a change is ready you open a pull request to contribute the changes back to the original repository.\n                      \n                      Pros\n                      \n                      Removes the need to give all collaborators adequate permissions on your repository\n                      Only project maintainers can approve new code\n                      You can use any other model within your main repository and forks to develop changes\n                      \n                      \n                      \n                      \n                      \n                      Git Flow\n                      In this model the main development occurs in a develop branch. Feature branches are created from this develop branch. When the develop branch is ready for a release, you create a release branch which is then tested and merged onto the develop and main branches.\n                      \n                      Pros\n                      \n                      There is a clear purpose for each branch\n                      Handles complex projects well\n                      \n                      \n                      \n                      Cons\n                      \n                      Very steep learning curve, not suitable for novices\n                      \n                          gitGraph\n        accDescr {A git graph showing the GitFlow model.}\n        commit tag:\"0.1\"\n        branch hotfix\n        checkout main\n        branch release\n        branch develop\n        checkout hotfix\n        commit\n        checkout develop\n        commit\n        branch small_feature\n        checkout develop\n        merge hotfix\n        branch large_feature\n        checkout small_feature\n        commit\n        checkout large_feature\n        commit\n        commit\n        checkout main\n        merge hotfix tag:\"0.2\"\n        checkout small_feature\n        commit\n        checkout develop\n        merge small_feature\n        checkout release\n        merge develop\n        checkout large_feature\n        commit\n        checkout release\n        commit\n        commit\n        checkout main\n        merge release tag:\"1.0\"\n        checkout develop\n        merge release"
  },
  {
    "objectID": "episodes/02-branching.html#recommendations",
    "href": "episodes/02-branching.html#recommendations",
    "title": "Git & GitHub Working Practices",
    "section": "Recommendations",
    "text": "Recommendations\n                      For small projects using a Feature Branch model is normally sufficient. If your team is large, or you expect external collaborators to contribute then we recommend developing using forks. Most open source projects require you to submit new code using a fork. The next few episodes will guide you through examples of both models.\n                      This wasn’t an exhaustive list of branching models! You can find more information using the links below:\n                      \n                      From Novice to Pro: Understanding Git Branching Strategies, GitProtect\n                      What is a Git workflow?, GitLab\n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      A clearly communicated branching model helps developers.\n                      For small projects use the Feature Branch flow.\n                      For larger projects or those with external collaborators use forks with feature branches."
  },
  {
    "objectID": "episodes/00-repo-access.html",
    "href": "episodes/00-repo-access.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View"
  },
  {
    "objectID": "episodes/00-repo-access.html#permission-levels",
    "href": "episodes/00-repo-access.html#permission-levels",
    "title": "Git & GitHub Working Practices",
    "section": "Permission Levels",
    "text": "Permission Levels\n                      \n                      Personal Repositories\n                      Repositories on personal accounts only have two levels of permissions, the Owner and Collaborators1. To use the branching model in this lesson you would need adding as a collaborator. You can still contribute to a public repository without being added as a collaborator by using the forking model.\n                      \n                      \n                      Organisational Repositories\n                      Repositories in organisations have more levels of permissions2. Team members require at least write access to use the branching model. For all lower levels of access use the forking model.\n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      On a repository you own or are an admin on navigate to https://github.com/&lt;organisation&gt;/&lt;repository&gt;/settings/access to control access for collaborators.\n                      You can give individuals or teams access to a repository."
  },
  {
    "objectID": "episodes/00-repo-access.html#footnotes",
    "href": "episodes/00-repo-access.html#footnotes",
    "title": "Git & GitHub Working Practices",
    "section": "Footnotes",
    "text": "Footnotes\n                      \n                      \n                      The GitHub documentation has more information on permissions for a repository on a personal account.↩︎\n                      The GitHub Documentation has more information on the different permission levels for repositories in organisations.↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View\n                \n                      \n            \n          \n          \n        \n        \n          \n            \n              \n              Menu\n            \n            \n              \n            \n            \n              \n            \n            \n              \n            \n            \n              \n                \n                  \n                    \n                  \n                \n                \n                \n                  \n                  Setup\n                \n                        \n                  Key Points\n                \n                \n                  Glossary\n                \n                \n                  Learner Profiles\n                \n                                  \n                    \n                      More \n                    \n                    \n                      \n\n                      Git Cheatsheets for Quick Reference\n                      Discussion\n                      FCM vs Git Cheat Sheet            \n                  \n                      \n            \n            \n            \n            \n              \n                \n                \n              \n              \n                \n              \n            \n          \n        \n\n        \n          \n        \n\n        \n          \n            0%\n          \n          \n            \n            \n          \n            \n      \n        \n          \n            \n              \n                \n              \n              \n                \n                  \n                    \n                      \n                        \n                          \n                        \n                        Toggle Theme\n                      \n                      \n                        \n                          \n                            \n                              \n                            \n                            Light\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Dark\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Auto\n                            \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                                            \n                            \n                               Learner View\n                            \n                          \n                          \n                            \n                              Instructor View\n                            \n                          \n                                          \n                      \n                    \n                  \n                  \n                  \n                \n\n                \n                  \n\n                    \n                      EPISODES\n                    \n                    \n\n                      \n                        \n\n                                \n                                  \n                                    \n                                      Summary and Setup\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      1. Repository Access\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      2. Issues\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      3. Branching Models\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      4. Feature Branch Model\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      5. Review\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      6. Break\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      7. Forks\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      8. Conflicts\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      9. History\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      10. End\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      11. 'Rebasing'\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      12. 'Pre-commit'\n                                    \n                                  \n                                              \n                    \n                  \n                \n                \n\n                \n                          \n                    \n                      \n                        \n                          RESOURCES\n                        \n                      \n                      \n                        \n                          \n                            \n                            \n                              \n                              Setup\n                            \n                                                \n                              Key Points\n                            \n                            \n                              Glossary\n                            \n                            \n                              Learner Profiles\n                            \n                                                \n                          \n                        \n                      \n                    \n                  \n                  \n                  \n                  \n                  \n\n                  \n                              \n                \n              \n            \n          \n                        In this course you will be learning how to effectively collaborate with colleagues using Git and GitHub. Good working practices help us avoid mistakes, keep our codebases secure, and help us write sustainable code. Having clear practices for contributing to your repository encourages outside collaborators to contribute to your work. In this lesson we’ll look at what good practice using Git and GitHub might look like.\n                                               One process to develop new code with Git and GitHub looks like this:\n                                               \n                                               Open an Issue describing the feature or bug\n                                               Create a branch to develop your changes on\n                                               Make changes to your working copy\n                                               Write tests\n                                               Write documentation\n                                               Open a Pull Request\n                                               Review your changes\n                                               Merge the Pull Request and close the Issue\n                                               Tidy up your branches\n                                               \n                                               During this workshop you will practice collaborating using a similar albeit simplified process on a test repository your instructors have set up. By the end of the course you should have the skills and knowledge to decide what working practices are best for you and your team.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Prerequisites\n                                               \n                                               In this lesson we use Git from the Unix Shell. Some previous experience with the shell is expected, but isn’t mandatory.\n                                               This is a follow up course from the Version Control with Git lesson. Please ensure you are comfortable with the beginner material prior to starting this course.\n                                               \n                                               \n                                               \n                                               \n                                               \n      \n      \t\t\n      \t\t\t\n      \t\t\t\n              This lesson is subject to the &lt;(Code of Conduct)&gt;\n              Edit on GitHub\n              | Contributing\n              | Source\n      \t\t\t\tCite | Contact | About\n      \t\t\t\n      \t\t\t\n                      Materials licensed under &lt;({license})&gt; by the authors\n                      Template licensed under &lt;(CC-BY 4.0)&gt; by {template_authors}\n              Built with Quarto"
  },
  {
    "objectID": "site/built/index.html",
    "href": "site/built/index.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View\n                \n                      \n            \n          \n          \n        \n        \n          \n            \n              \n              Menu\n            \n            \n              \n            \n            \n              Git & GitHub Working Practices\n            \n            \n              \n            \n            \n              \n                \n                  \n                    Git & GitHub Working Practices\n                  \n                \n                \n                \n                  \n                  Setup\n                \n                        \n                  Key Points\n                \n                \n                  Glossary\n                \n                \n                  Learner Profiles\n                \n                                  \n                    \n                      More \n                    \n                    \n                      \n\n                      Git Cheatsheets for Quick Reference\n                      Discussion\n                      FCM vs Git Cheat Sheet            \n                  \n                      \n            \n            \n            \n            \n              \n                \n                \n              \n              \n                \n              \n            \n          \n        \n\n        \n          Git & GitHub Working Practices\n        \n\n        \n          \n            0%\n          \n          \n            \n            \n          \n            \n      \n        \n          \n            \n              \n                \n              \n              \n                \n                  \n                    \n                      \n                        \n                          \n                        \n                        Toggle Theme\n                      \n                      \n                        \n                          \n                            \n                              \n                            \n                            Light\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Dark\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Auto\n                            \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                                            \n                            \n                               Learner View\n                            \n                          \n                          \n                            \n                              Instructor View\n                            \n                          \n                                          \n                      \n                    \n                  \n                  \n                  \n                \n\n                \n                  \n\n                    \n                      ../../EPISODES\n                    \n                    \n\n                      \n                        \n\n                                \n                                  \n                                    \n                                      Summary and Setup\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      1. Repository Access\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      2. Issues\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      3. Branching Models\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      4. Feature Branch Model\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      5. Review\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      6. Break\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      7. Forks\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      8. Conflicts\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      9. History\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      10. End\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      11. 'Rebasing'\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      12. 'Pre-commit'\n                                    \n                                  \n                                              \n                    \n                  \n                \n                \n\n                \n                          \n                    \n                      \n                        \n                          RESOURCES\n                        \n                      \n                      \n                        \n                          \n                            \n                            \n                              \n                              Setup\n                            \n                                                \n                              Key Points\n                            \n                            \n                              Glossary\n                            \n                            \n                              Learner Profiles\n                            \n                                                \n                          \n                        \n                      \n                    \n                  \n                  \n                  \n                  \n                  \n\n                  \n                              \n                \n              \n            \n          \n                        In this course you will be learning how to effectively collaborate with colleagues using Git and GitHub. By the end of the course you should have the skills and knowledge to decide what working practices are best for you.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Prerequisites\n                                               \n                                               In this lesson we use Git from the Unix Shell. Some previous experience with the shell is expected, but isn’t mandatory.\n                                               This is a follow up course from the git-novice lesson. Please ensure you have worked through the beginner material prior to starting this course.\n                                               \n                                               \n                                               \n                                               \n                                               \n      \n      \t\t\n      \t\t\t\n      \t\t\t\n              This lesson is subject to the &lt;(Code of Conduct)&gt;\n              Edit on GitHub\n              | Contributing\n              | Source\n      \t\t\t\tCite | Contact | About\n      \t\t\t\n      \t\t\t\n                      Materials licensed under &lt;({license})&gt; by the authors\n                      Template licensed under &lt;(CC-BY 4.0)&gt; by {template_authors}\n              Built with Quarto"
  },
  {
    "objectID": "episodes/01-issues.html",
    "href": "episodes/01-issues.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View\n                \n                      \n            \n          \n          \n        \n        \n          \n            \n              \n              Menu\n            \n            \n              \n            \n            \n              Git & GitHub Working Practices\n            \n            \n              \n            \n            \n              \n                \n                  \n                    Git & GitHub Working Practices\n                  \n                \n                \n                \n                  \n                  Setup\n                \n                        \n                  Key Points\n                \n                \n                  Glossary\n                \n                \n                  Learner Profiles\n                \n                                  \n                    \n                      More \n                    \n                    \n                      \n\n                      Git Cheatsheets for Quick Reference\n                      Discussion\n                      FCM vs Git Cheat Sheet            \n                  \n                      \n            \n            \n            \n            \n              \n                \n                \n              \n              \n                \n              \n            \n          \n        \n\n        \n          Git & GitHub Working Practices\n        \n\n        \n          \n            0%\n          \n          \n            \n            \n          \n            \n      \n        \n          \n            \n              \n                \n              \n              \n                \n                  \n                    \n                      \n                        \n                          \n                        \n                        Toggle Theme\n                      \n                      \n                        \n                          \n                            \n                              \n                            \n                            Light\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Dark\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Auto\n                            \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                                            \n                            \n                               Learner View\n                            \n                          \n                          \n                            \n                              Instructor View\n                            \n                          \n                                          \n                      \n                    \n                  \n                  \n                  \n                \n\n                \n                  \n\n                    \n                      ../EPISODES\n                    \n                    \n\n                      \n                        \n\n                                \n                                  \n                                    \n                                      Summary and Setup\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      1. Repository Access\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      2. Issues\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      3. Branching Models\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      4. Feature Branch Model\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      5. Review\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      6. Break\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      7. Forks\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      8. Conflicts\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      9. History\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      10. End\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      11. 'Rebasing'\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      12. 'Pre-commit'\n                                    \n                                  \n                                              \n                    \n                  \n                \n                \n\n                \n                          \n                    \n                      \n                        \n                          RESOURCES\n                        \n                      \n                      \n                        \n                          \n                            \n                            \n                              \n                              Setup\n                            \n                                                \n                              Key Points\n                            \n                            \n                              Glossary\n                            \n                            \n                              Learner Profiles\n                            \n                                                \n                          \n                        \n                      \n                    \n                  \n                  \n                  \n                  \n                  \n\n                  \n                              \n                \n              \n            \n          \n                                        GitHub Issues (tickets) are where you plan and track work. You can assign individuals to Issues and label them with a relevant tag such as bug or enhancement. Before opening a new Issue check whether there is already one open for the feature or bug by using GitHub’s search.\n                      Here’s some advice for writing good Issues:\n                      \n                      Be clear and concise, provide plenty of detail\n                      State the expected outcomes\n                      Tag relevant collaborators\n                      Break up large Issues into several small ones and or use checklists to track tasks in the Issue\n                      \n                      Open an Issue on the git-training-demo repository to add a file stating your favourite cloud type.\n                      Navigate to the Issues tab:\n                      \n                      This repositories Issue tab looks different to the weather repository you worked on in the Introduction to Git & GitHub lesson. It uses Issue templates to provide templates for bugs and feature requests. Click on the green Get started button next to the Feature request option:\n                      \n                      You can see the Issue has text in the description already. This is from the template which provides a consistent structure to the Issues on this repo. The template has also added the enhancement label for you.\n                      Add in a clear title such as “Add mo-fitzroy’s favourite cloud type”, replace ‘mo-fitzroy’ with your GitHub username. Click Submit new issue.\n                      \n                      \n                      \n                        \n                        \n                        Instructor Note\n                        \n                      \n                      \n                      \n                      It’s a good idea to remind learners that images can be dropped straight into the Issue description. An image of a cloud should do!\n                      \n                      \n                      \n                      \n                      \n                      Projects, milestones, and labels\n                      Your instructor has set up a Project and some custom milestones for you to add to your Issue.\n                      \n                      Labels help you classify Issues and PRs.\n                      Milestones group Issues and PRs, tracking their progress towards a common milestone automatically.\n                      Projects are a tool for planning and tracking work via GitHub. Multiple repositories can be linked to a single project. Projects can have multiple views depending on your needs; some have kanban boards and gantt charts, others separate out an individual colleagues Issues to avoid clutter.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Assign yourself, a project, and a milestone to your Issue\n                      \n                      On the right hand side of the Issue you can:\n                      \n                      Assign yourself to the Issue so that others know you are working on it.\n                      Add the Issue to a Project by clicking on the cog next to the Projects section. (If you don’t see a project related to the training you might not have been granted permissions, ask your instructors for help)\n                      Assign the Issue to a milestone.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      Issues are used to track and plan work.\n                      Issue templates provide template text for the first comment for new Issues of various types. They can auto-label Issues and encourage collaborators to give plenty of detail.\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n      \n      \t\t\n      \t\t\t\n      \t\t\t\n              This lesson is subject to the &lt;(Code of Conduct)&gt;\n              Edit on GitHub\n              | Contributing\n              | Source\n      \t\t\t\tCite | Contact | About\n      \t\t\t\n      \t\t\t\n                      Materials licensed under &lt;({license})&gt; by the authors\n                      Template licensed under &lt;(CC-BY 4.0)&gt; by {template_authors}\n              Built with Quarto"
  },
  {
    "objectID": "episodes/03-feature-branch.html",
    "href": "episodes/03-feature-branch.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View"
  },
  {
    "objectID": "episodes/03-feature-branch.html#cloning-a-repository",
    "href": "episodes/03-feature-branch.html#cloning-a-repository",
    "title": "Git & GitHub Working Practices",
    "section": "Cloning a Repository",
    "text": "Cloning a Repository\n                      You will both need to download a copy of the git-training-demo repository. This is called “cloning a repository”.\n                      $ cd ~/Desktop\n                      $ git clone git@github.com:metoffice/git-training-demo.git\n                      Make sure to navigate to the Desktop folder first."
  },
  {
    "objectID": "episodes/03-feature-branch.html#feature-branches",
    "href": "episodes/03-feature-branch.html#feature-branches",
    "title": "Git & GitHub Working Practices",
    "section": "Feature Branches",
    "text": "Feature Branches\n                      You can now make changes to the git-training-demo repository using your clone. We will use a feature branch to develop our change on:\n                      $ cd git-training-demo\n$ git switch -c 1_favourite_cloud\n                      Switched to branch '1_favourite_cloud'\n                      Notice the name of the branch is prefixed by the number 1. This is the Issue number of the Issue you created in Episode 2 Issues. Your team may choose a different naming convention such as prefixing the branch name by feature, bug etc.\n                      Add in a new file cloud-mo-fitzroy.md, replace mo-fitzroy with your username:\n                      $ nano cloud-mo-fitzroy.md\n$ cat cloud-mo-fitzroy.md\n                      # My Favourite Cloud\n\nLight and fluffy cumulus.\n                      Add and commit your changes:\n                      $ git add cloud-mo-fitzroy.md\n$ git commit -m \"Adds Robert Fitzroy's favourite cloud\"\n                      [1_favourite_cloud b7f26e6] Adds Robert Fitzroy's favourite cloud\n 1 file changed, 3 insertions(+)\n create mode 100644 cloud-mo-fitzroy.md\n                      Then push the changes to GitHub:\n                      $ git push\n                      Enumerating objects: 4, done.\nCounting objects: 100% (4/4), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 357 bytes | 178.00 KiB/s, done.\nTotal 3 (delta 1), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nremote: \nremote: Create a pull request for '1_favourite_cloud' on GitHub by visiting:\nremote:      https://github.com/MetOffice/git-training-demo/pull/new/1_favourite_cloud\nremote: \nTo github.com:metoffice/git-training-demo.git\n * [new branch]      1_favourite_cloud -&gt; 1_favourite_cloud\nbranch '1_favourite_cloud' set up to track 'origin/1_favourite_cloud'.\n                      Note that we didn’t have to create a remote called origin: Git uses this name by default when we clone a repository. This is why origin was a sensible choice in the git-novice lesson when we were setting up remotes by hand.\n                      Take a look at the repository on GitHub again, and you should be able to see the 1_favourite_cloud branch. You may need to refresh your browser to see the new branch.\n                      \n                      \n                      \n                        \n                        \n                        fatal: no upstream branch\n                        \n                      \n                      \n                      \n                      If you see a message similar to the following:\n                      fatal: The current branch 1_favourite_cloud has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin 1_favourite_cloud\n\nTo have this happen automatically for branches without a tracking\nupstream, see 'push.autoSetupRemote' in 'git help config'.\n                      You will need to set the name of the upstream GitHub branch using the recommended git push command.\n                      You can get git to automatically set the upstream branch. This avoids having to run git push with the –set-upstream flag the first time you push from a new branch.\n                      Change your git config using:\n                      $ git config --global push.autoSetupRemote true\n                      \n                      \n                      \n                      \n                      \n                      \n                      \n                        \n                        \n                        Some more about remotes\n                        \n                      \n                      \n                      \n                      In this episode and in the git-novice lesson, our local repository only had a single “remote”, called origin. A remote is a copy of the repository that is hosted somewhere else, that we can push to and pull from, and there’s no reason that you have to work with only one. For example, on some large projects you might have your own copy in your own GitHub account (you’d probably call this origin) and also the main “upstream” project repository (let’s call this upstream for the sake of examples). You would pull from upstream from time to time to get the latest updates that other people have committed. We will practice using an upstream repository later in the forking model.\n                      Remember that the name you give to a remote only exists locally. It’s an alias that you choose - whether origin, or upstream, or mo-fitzroy - and not something intrinsic to the remote repository.\n                      The git remote family of commands is used to set up and alter the remotes associated with a repository. Here are some of the most useful ones:\n                      \n                      git remote -v lists all the remotes that are configured (we already used this in the last episode)\n                      git remote add [name] [url] is used to add a new remote\n                      git remote remove [name] removes a remote. Note that it doesn’t affect the remote repository at all - it just removes the link to it from the local repo.\n                      git remote set-url [name] [newurl] changes the URL that is associated with the remote. This is useful if it has moved, e.g. to a different GitHub account, or from GitHub to a different hosting service. Or, if we made a typo when adding it!\n                      git remote rename [oldname] [newname] changes the local alias by which a remote is known - its name. For example, one could use this to change upstream to mo-fitzroy."
  },
  {
    "objectID": "episodes/03-feature-branch.html#open-a-pr",
    "href": "episodes/03-feature-branch.html#open-a-pr",
    "title": "Git & GitHub Working Practices",
    "section": "Open a PR",
    "text": "Open a PR\n                      In the git-novice lesson you practised opening a pull request.\n                      You should see a notification appear on GitHub telling you the 1_favourite_cloud branch had recent pushes. The Collaborator should click on the green Compare & pull request button to open the PR.\n                      If you don’t see this notification click on the branches dropdown, the button showing main, and click on the 1_favourite_cloud branch.\n                      \n                      You should now see the Code view for the 1_favourite_cloud branch and a Contribute button. Click on the Contribute button and select the green Open pull request option.\n                      \n                      You may have noticed when running git push on the 1_favourite_cloud branch for the first time the output contained:\n                      remote: Create a pull request for '1_favourite_cloud' on GitHub by visiting:\nremote:      https://github.com/MetOffice/git-training-demo/pull/new/1_favourite_cloud\n                      You could have also followed this link to create a new PR. We recommend you always open a draft PR after your first push. This gives you access to a diff of your changes against the target branch (usually main). When the changes are ready for review you can mark the PR as Ready for review."
  },
  {
    "objectID": "episodes/03-feature-branch.html#pull-request-templates",
    "href": "episodes/03-feature-branch.html#pull-request-templates",
    "title": "Git & GitHub Working Practices",
    "section": "Pull Request Templates",
    "text": "Pull Request Templates\n                      Notice the description has filled with a template. Just like this repository used Issue templates it also uses a PR template.\n                      This template has a checklist that needs to be completed before opening the PR1. It also has checklists for science and code review. In the description scroll down to the checklists which look like this:\n                      - [ ] I have read `CONTRIBUTING.md` and added my name as a Code Contributor.\n                      Some open source projects require you to add your name to a list of contributors. We will do this later so for now mark the task as complete. Replace the space in the square checkbox brackets with an x to mark the task as complete:\n                      - [x] I have read `CONTRIBUTING.md` and added my name as a Code Contributor.\n                      Now when you open the PR it should look something like this:\n                      \n                      This image shows PR number #8. This PR will close/fix Issue number #7 (the top left arrow). You can request a review on the top right. Some repositories will be set up to automatically assign a reviewer based on how many reviews each team member currently has open2. The bottom arrow shows the checklist items we marked as complete.\n                      At the bottom of your PR you can see that a review is required before merging. All checks have passed, this repository has automatic checks for trailing whitespace, accidentally adding large files etc. More information can be found in the optional episode on pre-commit hooks."
  },
  {
    "objectID": "episodes/03-feature-branch.html#help-some-checks-have-failed",
    "href": "episodes/03-feature-branch.html#help-some-checks-have-failed",
    "title": "Git & GitHub Working Practices",
    "section": "Help: Some checks have failed",
    "text": "Help: Some checks have failed\n                      If your now open Pull Request says some checks have failed this is because your changes did not pass the automatic pre-commit checks.\n                      Click on the Details link next to the failed test and fix your code on your local repository. Commit and then push this fix to GitHub. Your PR will automatically update and re-run the tests, you may need to refresh the page."
  },
  {
    "objectID": "episodes/03-feature-branch.html#footnotes",
    "href": "episodes/03-feature-branch.html#footnotes",
    "title": "Git & GitHub Working Practices",
    "section": "Footnotes",
    "text": "Footnotes\n                      \n                      \n                      You can also open a draft PR and then edit the top comment to mark the checklist tasks as completed.↩︎\n                      The GitHub Documentation has more information on automatically assigning reviewers.↩︎"
  },
  {
    "objectID": "episodes/05-forks.html",
    "href": "episodes/05-forks.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View"
  },
  {
    "objectID": "episodes/05-forks.html#open-an-issue",
    "href": "episodes/05-forks.html#open-an-issue",
    "title": "Git & GitHub Working Practices",
    "section": "Open an Issue",
    "text": "Open an Issue\n                      Open a new issue like you did earlier to add more detail to your favourite cloud file."
  },
  {
    "objectID": "episodes/05-forks.html#create-a-fork",
    "href": "episodes/05-forks.html#create-a-fork",
    "title": "Git & GitHub Working Practices",
    "section": "Create a Fork",
    "text": "Create a Fork\n                      On the repository Code tab click on the Fork dropdown arrow and then the + Create a new fork button:\n                      \n                      GitHub will take you to the Create a new fork page. There is no need to edit anything on this page. Click on the green Create fork button:\n                      \n                      You should now see your repository fork. The repository is marked as a fork by the fork symbol next to the repository organisation and name in the top navigation bar. Under the main repository name you can see a link to the repository we forked from. The notification at the bottom of the screenshot shows whether your forks main branch is up to date with the upstream repository. If you have commits on your fork not present upstream you can Contribute your changes upstream via a PR. If your fork is behind the upstream repository you can Sync fork to pull in changes from the upstream repository."
  },
  {
    "objectID": "episodes/05-forks.html#make-changes",
    "href": "episodes/05-forks.html#make-changes",
    "title": "Git & GitHub Working Practices",
    "section": "Make Changes",
    "text": "Make Changes\n                      To avoid overwriting your local version of the original Met Office git-training-demo repository you need to clone your fork to a different location.\n                      To clone the repository into your Desktop folder:\n                      $ git clone git@github.com:mo-fitzroy/git-training-demo.git ~/Desktop/mo-fitzroy-git-training-demo\n                      Replace ‘mo-fitzroy’ with the Owner’s username.\n                      If you choose to clone without the clone path (~/Desktop/mo-fitzroy-weather) specified at the end, you will clone inside the git-training-demo folder!\n                      Cloning into '~/Desktop/mo-fitzroy-git-training-demo'...\nremote: Enumerating objects: 16, done.\nremote: Counting objects: 100% (16/16), done.\nremote: Compressing objects: 100% (16/16), done.\nremote: Total 16 (delta 1), reused 11 (delta 0), pack-reused 0 (from 0)\nReceiving objects: 100% (16/16), 5.01 KiB | 1.00 MiB/s, done.\nResolving deltas: 100% (1/1), done.\n                      Create your feature branch:\n                      $ cd ~/Desktop/mo-fitzroy-git-training-demo\n$ git switch -c 2_update_favourite_cloud\n                      Switched to a new branch '2_update_favourite_cloud'\n                      Add more detail to your favourite cloud file:\n                      $ nano cloud-mo-fitzroy.md\n$ cat cloud-mo-fitzroy.md\n                      # My Favourite Cloud\n\nLight and fluffy cumulus.\nNice to sail under.\n                      Add and commit your changes:\n                      $ git add cloud-mo-fitzroy.md\n$ git commit -m \"Adds more details to Robert FitzRoy's favourite cloud file\"\n                      [2_update_favourite_cloud 1b05798] Adds more details to Robert FitzRoy's favourite cloud file\n 1 file changed, 1 insertion(+)\n                      Push the changes to your GitHub fork:\n                      $ git push\n                      Enumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 369 bytes | 123.00 KiB/s, done.\nTotal 3 (delta 1), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nremote: \nremote: Create a pull request for '2_update_favourite_cloud' on GitHub by visiting:\nremote:      https://github.com/mo-fitzroy/git-training-demo/pull/new/2_update_favourite_cloud\nremote: \nTo github.com:mo-fitzroy/git-training-demo.git\n * [new branch]      2_update_favourite_cloud -&gt; 2_update_favourite_cloud\nbranch '2_update_favourite_cloud' set up to track 'origin/2_update_favourite_cloud'."
  },
  {
    "objectID": "episodes/05-forks.html#open-a-pull-request",
    "href": "episodes/05-forks.html#open-a-pull-request",
    "title": "Git & GitHub Working Practices",
    "section": "Open a Pull Request",
    "text": "Open a Pull Request\n                      Head back to your fork on GitHub and open a PR to contribute your changes upstream to the main git-training-demo repository. You must use the Fixes keyword this time to automatically close your Issue when the PR is merged since you are contributing the change from a Fork2.\n                      \n                      The PR will now need to be approved and merged by your instructors.\n                      \n                      \n                      \n                        \n                        \n                        Instructor Note\n                        \n                      \n                      \n                      \n                      Take a break here! This will give you and your co-instructor time to approve, and squash and merge the PRs."
  },
  {
    "objectID": "episodes/05-forks.html#updating-a-fork",
    "href": "episodes/05-forks.html#updating-a-fork",
    "title": "Git & GitHub Working Practices",
    "section": "Updating a Fork",
    "text": "Updating a Fork\n                      Our fork is now behind the main upstream repository by one commit. We are going to update our fork. First we need to set the correct upstream remote in git.\n                      Switch back to your forks main branch:\n                      $ git switch main\n                      Now run:\n                      $ git remote -v\n                      origin  git@github.com:mo-fitzroy/git-training-demo.git (fetch)\norigin  git@github.com:mo-fitzroy/git-training-demo.git (push)\n                      This shows the GitHub remote links for our fork. To set the upstream remote we can run:\n                      $ git remote add upstream git@github.com:MetOffice/git-training-demo.git\n$ git remote -v\n                      origin  git@github.com:mo-fitzroy/git-training-demo.git (fetch)\norigin  git@github.com:mo-fitzroy/git-training-demo.git (push)\nupstream    git@github.com:MetOffice/git-training-demo.git (fetch)\nupstream    git@github.com:MetOffice/git-training-demo.git (push)\n                      Now git knows about the forks upstream repository. We can fetch the changes to the upstream repository by running:\n                      $ git fetch upstream\n                      remote: Enumerating objects: 6, done.\nremote: Counting objects: 100% (6/6), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 4 (delta 3), reused 2 (delta 2), pack-reused 0 (from 0)\nUnpacking objects: 100% (4/4), 1.10 KiB | 41.00 KiB/s, done.\nFrom github.com:MetOffice/git-training-demo\n * [new branch]      main                   -&gt; upstream/main\n                      We now have access to the upstream/main branch. To merge in the changes on upstream/main:\n                      $ git merge upstream/main\n                      And push:\n                      $ git push\n                      Total 0 (delta 0), reused 0 (delta 0), pack-reused 0\nTo github.com:mo-fitzroy/git-training-demo.git\n   f87bb5c..90808ab  main -&gt; main\n                      Your forks main branch is now up to date with the original git-training-demo repositories main branch.\n                      \n                      \n                      \n                      \n                      \n                      \n                      Sync via GitHub\n                      \n                      \n                      \n                      This is equivalent of syncing your fork via the GitHub banner shown earlier:\n                      \n                      If your fork is behind the upstream repository GitHub will alert you on the banner. You can use the Sync fork button to update your fork like we did above. After syncing your fork this way run git pull on your local main branch."
  },
  {
    "objectID": "episodes/05-forks.html#summary-diagram",
    "href": "episodes/05-forks.html#summary-diagram",
    "title": "Git & GitHub Working Practices",
    "section": "Summary Diagram",
    "text": "Summary Diagram\n                      The workflow for forking is similar to that for branching. There are only a few differences after you’ve set up your fork for the first time:\n                      \n                      You should open Issues on the upstream repository not your fork.\n                      After merging in a PR on the upstream repository you need the added step of syncing your forks main branch.\n                      \n                      sequenceDiagram\n    accDescr {A sequence diagram showing the steps for using\n    Forks with the branching model.}\n    autonumber\n    participant UM as upstream main\n    participant GHM as origin main\n    participant GHF as origin feature\n    participant M as main\n    UM -&gt;&gt; UM: #f\n    Note over UM: Open an Issue for the change\n    UM --&gt;&gt; GHM: #f\n    Note right of UM: First time: Fork the repository\n    GHM --&gt;&gt; M: #f\n    Note right of GHM: First time: git clone&lt;br/&gt;Then: git pull\n    create participant F as feature\n    M -&gt;&gt; F: Create a feature branch:&lt;br/&gt;git switch -c feature\n    loop\n        F -&gt;&gt; F: #f\n        Note over F: Develop changes:&lt;br/&gt;git add&lt;br/&gt;git commit\n    end\n    F --&gt;&gt; GHF: #f\n    Note left of F: Push to GitHub: git push&lt;br/&gt;The first push creates origin feature!\n    destroy GHF\n    GHF --&gt;&gt; UM: #f\n    Note left of GHF: Pull Request and then Merge.&lt;br/&gt;Delete origin feature branch.\n    UM --&gt;&gt; GHM: #f\n    Note right of UM: Sync your fork\n    GHM --&gt;&gt; M: #f\n    Note right of GHM: git pull\n    Note over F: Delete branch:&lt;br/&gt;git branch -d feature\n    box Upstream Remote - GitHub\n    participant UM\n    end\n    box Fork Remote - GitHub\n    participant GHM\n    participant GHF\n    end\n    box Fork - Local\n    participant M\n    participant F\n    end\n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      A fork is a server side, in our case GitHub, copy of the repository.\n                      Forks allow collaborators to contribute to the main repository without being given collaborator access or write permissions."
  },
  {
    "objectID": "episodes/05-forks.html#footnotes",
    "href": "episodes/05-forks.html#footnotes",
    "title": "Git & GitHub Working Practices",
    "section": "Footnotes",
    "text": "Footnotes\n                      \n                      \n                      If the repository is private collaborators will need to be given access to see the repository and create a fork. The same is true for private repositories in organisations.↩︎\n                      The GitHub Documentation has more information on linking PRs to Issues.↩︎"
  },
  {
    "objectID": "episodes/07-history.html",
    "href": "episodes/07-history.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View"
  },
  {
    "objectID": "episodes/07-history.html#viewing-history",
    "href": "episodes/07-history.html#viewing-history",
    "title": "Git & GitHub Working Practices",
    "section": "Viewing History",
    "text": "Viewing History\n                      You have already learnt that we can use the git log command to output the commit history of our repository.\n                      $ git log\n                      commit acce45c86ece7fd4823ddc6c1addb43edf4c0794\nMerge: e3fc783 ca8aca9\nAuthor: Robert FitzRoy &lt;r.fitzroy@mo-weather.uk&gt;\nDate:   Mon Sep 23 15:50:15 2024 +0100\n\n    Merge pull request #1 from MetOffice/mo-fitzroy-patch-1\n    \n    Create CITATION.cff\n\ncommit ca8aca9f2f43a4d799eb5c9ce9596b42360faa8b\nAuthor: Robert FitzRoy &lt;r.fitzroy@mo-weather.uk&gt;\nDate:   Mon Sep 23 15:49:36 2024 +0100\n\n    Create CITATION.cff\n\ncommit e3fc783648222d5eef0739922b06794b8d690341\nAuthor: Robert FitzRoy &lt;r.fitzroy@mo-weather.uk&gt;\nDate:   Fri Sep 20 13:01:05 2024 +0100\n\n    Initial commit\n                      This shows the first 3 commits to the git-training-demo repository (the full output isn’t shown here because it’s very long). We can use certain flags with git log to better visualise the history in graph form:\n                      $ git log --decorate --oneline --graph\n                      *   d800b46 (HEAD -&gt; main, origin/main, origin/HEAD) Merge pull request #2 from MetOffice/mo-fitzroy-patch-2\n|\\  \n| * dbc944d Add pre-commit checks\n|/  \n*   acce45c Merge pull request #1 from MetOffice/mo-fitzroy-patch-1\n|\\  \n| * ca8aca9 Create CITATION.cff\n|/  \n* e3fc783 Initial commit\n                      The GitHub Documentation for git log has information on all the available flags. The key here is --graph shows us the graphical representation of our history on the left of the terminal. *’s are commits which are connected by lines. The vertical lines represent links between commits. The output above shows two feature branches each with only one commit which were then merged back into main via a pull request.\n                      You can either remember the flags using the phrase “git dog”, d for --decorate, o for --oneline, g for --graph or you can set an alias for the git log command:\n                      $ git config --global alias.dog \"log --decorate --oneline --graph\"\n                      This alias makes these two commands equivalent:\n                      $ git dog\n$ git log --decorate --oneline --graph\n                      You can of course customise the log command with other keywords and set more aliases for different log views. Some useful examples can be found on this Stackoverflow comment.\n                      \n                      \n                      \n                      \n                      \n                      \n                      IDE Git History Extensions\n                      \n                      \n                      \n                      Your IDE may have extensions which render your git history as easy to read graphs. If you use VSCode we recommend the Git Graph extension."
  },
  {
    "objectID": "episodes/07-history.html#merge-options",
    "href": "episodes/07-history.html#merge-options",
    "title": "Git & GitHub Working Practices",
    "section": "Merge Options",
    "text": "Merge Options\n                      When you opened your PRs you were given three options for merging your feature branch into main. We will now explore how each merging method affects the history of your repository. In all the examples below we start with the same git history.\n                      \n                      Merge\n                      Starting with:\n                      gitGraph\n    accDescr {A Git graph showing the &lt;code&gt;main&lt;/code&gt; branch with a &lt;code&gt;feature&lt;/code&gt; branch branching off at the second commit of &lt;code&gt;main&lt;/code&gt;.}\n    commit id: '4631ebc'\n    commit id: 'ee406ac'\n    branch feature\n    checkout feature\n    commit id: '7cec787 Cool feature'\n    checkout main\n    commit id: '62440f8'\n    checkout feature\n    commit id: 'cd2db46 Cool feature docs'\n                      Using merge creates a merge commit joining the two branches:\n                      gitGraph\n    accDescr {A Git graph showing the result of merging a &lt;code&gt;feature&lt;/code&gt; branch with the &lt;code&gt;main&lt;/code&gt; branch. The history is non-linear in this case and difficult to read.}\n    commit id: '4631ebc'\n    commit id: 'ee406ac'\n    branch feature\n    checkout feature\n    commit id: '7cec787 Cool feature'\n    checkout main\n    commit id: '62440f8'\n    checkout feature\n    commit id: 'cd2db46 Cool feature docs'\n    checkout main\n    merge feature\n                      This results in a non-linear history which can be hard to navigate. You can avoid this non-linear history by rebasing your feature branch before you merge. Rebasing a branch before you submit a PR for review is covered in the next episode.\n                      Some teams choose to use Merge because it keeps all the individual commits that made up your change so more accurately represents the history of your repository.\n                      \n                      \n                      Squash and Merge\n                      Starting with:\n                      gitGraph\n    accDescr {A Git graph showing the &lt;code&gt;main&lt;/code&gt; branch with a &lt;code&gt;feature&lt;/code&gt; branch branching off at the second commit of &lt;code&gt;main&lt;/code&gt;.}\n    commit id: '4631ebc'\n    commit id: 'ee406ac'\n    branch feature\n    checkout feature\n    commit id: '7cec787 Cool feature'\n    checkout main\n    commit id: '62440f8'\n    checkout feature\n    commit id: 'cd2db46 Cool feature docs'\n                      Squashing before merging squashes all the commits on the feature branch into one commit which is then merged onto main:\n                      gitGraph\n    accDescr {A Git graph showing the result of squashing then merging a &lt;code&gt;feature&lt;/code&gt; branch with the &lt;code&gt;main&lt;/code&gt; branch.}\n    commit id: '4631ebc'\n    commit id: 'ee406ac'\n    commit id: '62440f8'\n    commit id: '5rtw8bq Squash & Merge Cool feature'\n                      The last commit on main 5rtw8bq Squash & Merge Cool feature is the two feature branch commits squashed together into a new one.\n                      Here the history is linear but all our commits have been squashed into one. If you have a very large branch with many commits you might not want to squash them all into one commit. Squashing in this case will make bug hunting harder. Remember you should try and break work down into small pieces so you avoid huge branches.\n                      \n                      \n                      Rebase\n                      Starting with:\n                      gitGraph\n    accDescr {A Git graph showing the &lt;code&gt;main&lt;/code&gt; branch with a &lt;code&gt;feature&lt;/code&gt; branch branching off at the second commit of &lt;code&gt;main&lt;/code&gt;.}\n    commit id: '4631ebc'\n    commit id: 'ee406ac'\n    branch feature\n    checkout feature\n    commit id: '7cec787 Cool feature'\n    checkout main\n    commit id: '62440f8'\n    checkout feature\n    commit id: 'cd2db46 Cool feature docs'\n                      Rebase re-writes your git history removing the feature branch commits from the feature branch and adding them to main:\n                      gitGraph\n    accDescr {A Git graph showing the result of rebasing a &lt;code&gt;feature&lt;/code&gt; branch with the &lt;code&gt;main&lt;/code&gt; branch.}\n    commit id: '4631ebc'\n    commit id: 'ee406ac'\n    commit id: '62440f8'\n    commit id: '7cec787 Cool feature'\n    commit id: 'cd2db46 Cool feature docs'\n                      \n                      \n                      Rebase Re-Writes History\n                      Rebasing re-writes your git history. Do NOT rebase shared branches such as main.\n                      \n                      Since rebase re-writes your history you have to force push to the GitHub remote to override your remotes history. The history in this case is linear and retains all the commits which makes it easier to search for a commit that introduced a bug. Rebasing a feature branch can be difficult / impossible if you have merged main into your feature branch to update it with the latest changes or resolve conflicts. You should choose to move your feature branch to the HEAD of main using rebasing instead.\n                      Your team will decide what approach is right for your project.\n                      \n                      \n                      \n                      \n                      \n                      Keypoints\n                      \n                      \n                      git log --decorate --oneline --graph lets you visualise your repository history in graph form.\n                      There are three options for merging your feature branch into main.\n                      merge: creates a merge commit and results in a non-linear history unless you first rebase your feature branch.\n                      squash and merge: squashes all your feature branch commits into one merge commit on main. Your history is linear.\n                      rebase: re-writes your git history so that all the feature branch commits are now on main. Your history is linear."
  },
  {
    "objectID": "episodes/09-pre-commit.html",
    "href": "episodes/09-pre-commit.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View\n                \n                      \n            \n          \n          \n        \n        \n          \n            \n              \n              Menu\n            \n            \n              \n            \n            \n              Git & GitHub Working Practices\n            \n            \n              \n            \n            \n              \n                \n                  \n                    Git & GitHub Working Practices\n                  \n                \n                \n                \n                  \n                  Setup\n                \n                        \n                  Key Points\n                \n                \n                  Glossary\n                \n                \n                  Learner Profiles\n                \n                                  \n                    \n                      More \n                    \n                    \n                      \n\n                      Git Cheatsheets for Quick Reference\n                      Discussion\n                      FCM vs Git Cheat Sheet            \n                  \n                      \n            \n            \n            \n            \n              \n                \n                \n              \n              \n                \n              \n            \n          \n        \n\n        \n          Git & GitHub Working Practices\n        \n\n        \n          \n            0%\n          \n          \n            \n            \n          \n            \n      \n        \n          \n            \n              \n                \n              \n              \n                \n                  \n                    \n                      \n                        \n                          \n                        \n                        Toggle Theme\n                      \n                      \n                        \n                          \n                            \n                              \n                            \n                            Light\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Dark\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Auto\n                            \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                                            \n                            \n                               Learner View\n                            \n                          \n                          \n                            \n                              Instructor View\n                            \n                          \n                                          \n                      \n                    \n                  \n                  \n                  \n                \n\n                \n                  \n\n                    \n                      ../EPISODES\n                    \n                    \n\n                      \n                        \n\n                                \n                                  \n                                    \n                                      Summary and Setup\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      1. Repository Access\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      2. Issues\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      3. Branching Models\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      4. Feature Branch Model\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      5. Review\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      6. Break\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      7. Forks\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      8. Conflicts\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      9. History\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      10. End\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      11. 'Rebasing'\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      12. 'Pre-commit'\n                                    \n                                  \n                                              \n                    \n                  \n                \n                \n\n                \n                          \n                    \n                      \n                        \n                          RESOURCES\n                        \n                      \n                      \n                        \n                          \n                            \n                            \n                              \n                              Setup\n                            \n                                                \n                              Key Points\n                            \n                            \n                              Glossary\n                            \n                            \n                              Learner Profiles\n                            \n                                                \n                          \n                        \n                      \n                    \n                  \n                  \n                  \n                  \n                  \n\n                  \n                              \n                \n              \n            \n          \n                        Git hooks let you run certain scripts before git actions. In this optional episode we are going to set up a pre-commit hook which runs quality assurance checks on our code before we are allowed to make a commit.\n                                               pre-commit is a Python package that makes it easier to set up git hooks. To install it using pip or conda:\n                                               \n                                               \n                                               pip\n                                               $ pip install pre-commit\n                                               \n                                               \n                                               conda\n                                               $ conda install pre-commit\n                                               \n                                               \n                                               In the git-training-demo we provided an example pre-commit configuration. These pre-commit checks were run as part of your pull requests. We can install the pre-commit hook scripts so they run before we can commit locally:\n                                               [git-training-demo]:(main =)$ pre-commit install\n                                               pre-commit installed at .git/hooks/pre-commit\n                                               It’s good practice to run the pre-commit checks on all your files after installing them.\n                                               [git-training-demo]:(main =)$ pre-commit run --all-files\n                                               [INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks.                     \n[INFO] Installing environment for https://github.com/pre-commit/pre-commit-hooks.              \n[INFO] Once installed this environment will be reused.                                    \n[INFO] This may take a few minutes...\ndon't commit to branch ...................................................Passed\ncheck for added large files ..............................................Passed\ncheck for case conflicts .................................................Passed\ncheck for merge conflicts ................................................Passed\ncheck toml ...........................................(no files to check)Skipped\ncheck yaml ...............................................................Passed\nfix end of files .........................................................Passed\ntrim trailing whitespace .................................................Passed\n                                               The next time the pre-commit scripts run they will re-use the Python environment that was just installed, making the run faster.\n                                               The pre-commit.com site has a reference of useful hooks. Your organisation may have their own pre-commit hooks which you can use and or block third party hooks for security.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Committing to Main\n                                               \n                                               With the pre-commit installed try adding any change to the main branch and then run git commit.\n                                               What happens with the pre-commit hooks installed?\n                                               \n                                               Solution (Solution). The pre-commit check for not committing to main fails so git commit wasn’t run. Your changes are still staged.\n                                               [git-training-demo]:(main +=)$ git commit -m \"Attempts to commit to main\"\n                                               don't commit to branch...................................................Failed\n- hook id: no-commit-to-branch\n- exit code: 1\ncheck for added large files..............................................Passed\ncheck for case conflicts.................................................Passed\ncheck for merge conflicts................................................Passed\ncheck toml...........................................(no files to check)Skipped\ncheck yaml...............................................................Passed\nfix end of files.........................................................Passed\ntrim trailing whitespace.................................................Passed\n                                               To move the staged changes to a new branch use git switch:\n                                               [git-training-demo]:(main +=)$ git switch -c &lt;branch-name&gt;\n                                               Switched to a new branch 'challenge'\n                                               [git-training-demo]:(challenge +)$ git status\n                                               On branch challenge\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n    modified:   .pre-commit-config.yaml\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n                                               Keypoints\n                                               \n                                               \n                                               pre-commit checks help prevent accidental commits to main and provide an extra layer of quality assurance.\n                                               \n                                               \n                                               \n                                               \n                                               \n                                               \n      \n      \t\t\n      \t\t\t\n      \t\t\t\n              This lesson is subject to the &lt;(Code of Conduct)&gt;\n              Edit on GitHub\n              | Contributing\n              | Source\n      \t\t\t\tCite | Contact | About\n      \t\t\t\n      \t\t\t\n                      Materials licensed under &lt;({license})&gt; by the authors\n                      Template licensed under &lt;(CC-BY 4.0)&gt; by {template_authors}\n              Built with Quarto"
  },
  {
    "objectID": "episodes/End.html",
    "href": "episodes/End.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View\n                \n                      \n            \n          \n          \n        \n        \n          \n            \n              \n              Menu\n            \n            \n              \n            \n            \n              Git & GitHub Working Practices\n            \n            \n              \n            \n            \n              \n                \n                  \n                    Git & GitHub Working Practices\n                  \n                \n                \n                \n                  \n                  Setup\n                \n                        \n                  Key Points\n                \n                \n                  Glossary\n                \n                \n                  Learner Profiles\n                \n                                  \n                    \n                      More \n                    \n                    \n                      \n\n                      Git Cheatsheets for Quick Reference\n                      Discussion\n                      FCM vs Git Cheat Sheet            \n                  \n                      \n            \n            \n            \n            \n              \n                \n                \n              \n              \n                \n              \n            \n          \n        \n\n        \n          Git & GitHub Working Practices\n        \n\n        \n          \n            0%\n          \n          \n            \n            \n          \n            \n      \n        \n          \n            \n              \n                \n              \n              \n                \n                  \n                    \n                      \n                        \n                          \n                        \n                        Toggle Theme\n                      \n                      \n                        \n                          \n                            \n                              \n                            \n                            Light\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Dark\n                            \n                              \n                            \n                          \n                        \n                        \n                          \n                            \n                              \n                            \n                            Auto\n                            \n                              \n                            \n                          \n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      \n                        \n                                            \n                            \n                               Learner View\n                            \n                          \n                          \n                            \n                              Instructor View\n                            \n                          \n                                          \n                      \n                    \n                  \n                  \n                  \n                \n\n                \n                  \n\n                    \n                      ../EPISODES\n                    \n                    \n\n                      \n                        \n\n                                \n                                  \n                                    \n                                      Summary and Setup\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      1. Repository Access\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      2. Issues\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      3. Branching Models\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      4. Feature Branch Model\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      5. Review\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      6. Break\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      7. Forks\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      8. Conflicts\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      9. History\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      10. End\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      11. 'Rebasing'\n                                    \n                                  \n                                \n\n\n                                \n                                  \n                                    \n                                      12. 'Pre-commit'\n                                    \n                                  \n                                              \n                    \n                  \n                \n                \n\n                \n                          \n                    \n                      \n                        \n                          RESOURCES\n                        \n                      \n                      \n                        \n                          \n                            \n                            \n                              \n                              Setup\n                            \n                                                \n                              Key Points\n                            \n                            \n                              Glossary\n                            \n                            \n                              Learner Profiles\n                            \n                                                \n                          \n                        \n                      \n                    \n                  \n                  \n                  \n                  \n                  \n\n                  \n                              \n                \n              \n            \n          \n                                        This marks the end of the the workshop. Please remember to fill out your post-workshop feedback. This feedback is vital for us to keep improving the lesson for other learners.\n                      Episodes after this End page are optional. Your instructor may choose to teach these episodes if time permits. Otherwise feel free to work through the episodes in your own time.\n                      \n                      Where to next?\n                      We’ve covered a lot over the last two workshops but there is always more to learn especially when it comes to GitHub!\n                      \n                      Microsoft Learn has a wide variety of GitHub training.\n                      In this lesson you saw automated testing of PRs using GitHub Actions which you might like to explore more.\n                      The optional rebasing episode guides you through rebasing a branch.\n                      Your Pull Requests ran automated tests using pre-commit checks which you can set up locally to run before you commit. The optional pre-commit episode outlines how to set up some basic checks.\n                      \n                      \n                      \n                      \n      \n      \t\t\n      \t\t\t\n      \t\t\t\n              This lesson is subject to the &lt;(Code of Conduct)&gt;\n              Edit on GitHub\n              | Contributing\n              | Source\n      \t\t\t\tCite | Contact | About\n      \t\t\t\n      \t\t\t\n                      Materials licensed under &lt;({license})&gt; by the authors\n                      Template licensed under &lt;(CC-BY 4.0)&gt; by {template_authors}\n              Built with Quarto"
  },
  {
    "objectID": "episodes/extract_all_images.html#repository-access-1",
    "href": "episodes/extract_all_images.html#repository-access-1",
    "title": "Git & GitHub Working Practices",
    "section": "Repository Access-1",
    "text": "Repository Access-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#issues-1",
    "href": "episodes/extract_all_images.html#issues-1",
    "title": "Git & GitHub Working Practices",
    "section": "Issues-1",
    "text": "Issues-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#issues-2",
    "href": "episodes/extract_all_images.html#issues-2",
    "title": "Git & GitHub Working Practices",
    "section": "Issues-2",
    "text": "Issues-2"
  },
  {
    "objectID": "episodes/extract_all_images.html#open-a-pr-1",
    "href": "episodes/extract_all_images.html#open-a-pr-1",
    "title": "Git & GitHub Working Practices",
    "section": "Open a PR-1",
    "text": "Open a PR-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#open-a-pr-2",
    "href": "episodes/extract_all_images.html#open-a-pr-2",
    "title": "Git & GitHub Working Practices",
    "section": "Open a PR-2",
    "text": "Open a PR-2"
  },
  {
    "objectID": "episodes/extract_all_images.html#pull-request-templates-1",
    "href": "episodes/extract_all_images.html#pull-request-templates-1",
    "title": "Git & GitHub Working Practices",
    "section": "Pull Request Templates-1",
    "text": "Pull Request Templates-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#reviewing-changes-1",
    "href": "episodes/extract_all_images.html#reviewing-changes-1",
    "title": "Git & GitHub Working Practices",
    "section": "Reviewing Changes-1",
    "text": "Reviewing Changes-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#reviewing-changes-2",
    "href": "episodes/extract_all_images.html#reviewing-changes-2",
    "title": "Git & GitHub Working Practices",
    "section": "Reviewing Changes-2",
    "text": "Reviewing Changes-2"
  },
  {
    "objectID": "episodes/extract_all_images.html#reviewing-changes-3",
    "href": "episodes/extract_all_images.html#reviewing-changes-3",
    "title": "Git & GitHub Working Practices",
    "section": "Reviewing Changes-3",
    "text": "Reviewing Changes-3"
  },
  {
    "objectID": "episodes/extract_all_images.html#reviewing-changes-4",
    "href": "episodes/extract_all_images.html#reviewing-changes-4",
    "title": "Git & GitHub Working Practices",
    "section": "Reviewing Changes-4",
    "text": "Reviewing Changes-4"
  },
  {
    "objectID": "episodes/extract_all_images.html#reviewing-changes-5",
    "href": "episodes/extract_all_images.html#reviewing-changes-5",
    "title": "Git & GitHub Working Practices",
    "section": "Reviewing Changes-5",
    "text": "Reviewing Changes-5"
  },
  {
    "objectID": "episodes/extract_all_images.html#reviewing-changes-6",
    "href": "episodes/extract_all_images.html#reviewing-changes-6",
    "title": "Git & GitHub Working Practices",
    "section": "Reviewing Changes-6",
    "text": "Reviewing Changes-6"
  },
  {
    "objectID": "episodes/extract_all_images.html#reviewing-changes-7",
    "href": "episodes/extract_all_images.html#reviewing-changes-7",
    "title": "Git & GitHub Working Practices",
    "section": "Reviewing Changes-7",
    "text": "Reviewing Changes-7"
  },
  {
    "objectID": "episodes/extract_all_images.html#reviewing-changes-8",
    "href": "episodes/extract_all_images.html#reviewing-changes-8",
    "title": "Git & GitHub Working Practices",
    "section": "Reviewing Changes-8",
    "text": "Reviewing Changes-8"
  },
  {
    "objectID": "episodes/extract_all_images.html#responding-to-review-1",
    "href": "episodes/extract_all_images.html#responding-to-review-1",
    "title": "Git & GitHub Working Practices",
    "section": "Responding to Review-1",
    "text": "Responding to Review-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#approving-changes-1",
    "href": "episodes/extract_all_images.html#approving-changes-1",
    "title": "Git & GitHub Working Practices",
    "section": "Approving Changes-1",
    "text": "Approving Changes-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#approving-changes-2",
    "href": "episodes/extract_all_images.html#approving-changes-2",
    "title": "Git & GitHub Working Practices",
    "section": "Approving Changes-2",
    "text": "Approving Changes-2"
  },
  {
    "objectID": "episodes/extract_all_images.html#approving-changes-3",
    "href": "episodes/extract_all_images.html#approving-changes-3",
    "title": "Git & GitHub Working Practices",
    "section": "Approving Changes-3",
    "text": "Approving Changes-3"
  },
  {
    "objectID": "episodes/extract_all_images.html#approving-changes-4",
    "href": "episodes/extract_all_images.html#approving-changes-4",
    "title": "Git & GitHub Working Practices",
    "section": "Approving Changes-4",
    "text": "Approving Changes-4"
  },
  {
    "objectID": "episodes/extract_all_images.html#approving-changes-5",
    "href": "episodes/extract_all_images.html#approving-changes-5",
    "title": "Git & GitHub Working Practices",
    "section": "Approving Changes-5",
    "text": "Approving Changes-5"
  },
  {
    "objectID": "episodes/extract_all_images.html#create-a-fork-1",
    "href": "episodes/extract_all_images.html#create-a-fork-1",
    "title": "Git & GitHub Working Practices",
    "section": "Create a Fork-1",
    "text": "Create a Fork-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#create-a-fork-2",
    "href": "episodes/extract_all_images.html#create-a-fork-2",
    "title": "Git & GitHub Working Practices",
    "section": "Create a Fork-2",
    "text": "Create a Fork-2"
  },
  {
    "objectID": "episodes/extract_all_images.html#create-a-fork-3",
    "href": "episodes/extract_all_images.html#create-a-fork-3",
    "title": "Git & GitHub Working Practices",
    "section": "Create a Fork-3",
    "text": "Create a Fork-3"
  },
  {
    "objectID": "episodes/extract_all_images.html#open-a-pull-request-1",
    "href": "episodes/extract_all_images.html#open-a-pull-request-1",
    "title": "Git & GitHub Working Practices",
    "section": "Open a Pull Request-1",
    "text": "Open a Pull Request-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#updating-a-fork-1",
    "href": "episodes/extract_all_images.html#updating-a-fork-1",
    "title": "Git & GitHub Working Practices",
    "section": "Updating a Fork-1",
    "text": "Updating a Fork-1"
  },
  {
    "objectID": "episodes/extract_all_images.html#open-a-pull-request-2",
    "href": "episodes/extract_all_images.html#open-a-pull-request-2",
    "title": "Git & GitHub Working Practices",
    "section": "Open a Pull Request-1",
    "text": "Open a Pull Request-1"
  },
  {
    "objectID": "learners/discuss.html",
    "href": "learners/discuss.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View"
  },
  {
    "objectID": "learners/discuss.html#frequently-asked-questions",
    "href": "learners/discuss.html#frequently-asked-questions",
    "title": "Git & GitHub Working Practices",
    "section": "Frequently Asked Questions",
    "text": "Frequently Asked Questions"
  },
  {
    "objectID": "learners/reference.html",
    "href": "learners/reference.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View"
  },
  {
    "objectID": "learners/reference.html#git-cheatsheets-for-quick-reference",
    "href": "learners/reference.html#git-cheatsheets-for-quick-reference",
    "title": "Git & GitHub Working Practices",
    "section": "Git Cheatsheets for Quick Reference",
    "text": "Git Cheatsheets for Quick Reference\n                      \n                      Printable Git cheatsheets in several languages are available here (English version). More material is available from the GitHub training website.\n                      An interactive one-page visualisation about the relationships between workspace, staging area, local repository, upstream repository, and the commands associated with each (with explanations).\n                      Both resources are also available in other languages (e.g. Spanish, French, and more).\n                      “Happy Git and GitHub for the useR” is an accessible, free online book by Jenny Bryan on how to setup and use Git and GitHub with specific references on the integration of Git with RStudio and working with Git in R.\n                      Open Scientific Code using Git and GitHub - A collection of explanations and short practical exercises to help researchers learn more about version control and open source software."
  },
  {
    "objectID": "learners/reference.html#glossary",
    "href": "learners/reference.html#glossary",
    "title": "Git & GitHub Working Practices",
    "section": "Glossary",
    "text": "Glossary\n                      \n                      changeset\n                      \n                      A group of changes to one or more files that are or will be added to a single commit in a version control repository.\n                      \n                      commit\n                      \n                      To record the current state of a set of files (a changeset) in a version control repository. As a noun, the result of committing, i.e. a recorded changeset in a repository. If a commit contains changes to multiple files, all of the changes are recorded together.\n                      \n                      conflict\n                      \n                      A change made by one user of a version control system that is incompatible with changes made by other users. Helping users resolve conflicts is one of version control’s major tasks.\n                      \n                      HTTP\n                      \n                      The Hypertext Transfer Protocol used for sharing web pages and other data on the World Wide Web.\n                      \n                      merge\n                      \n                      (a repository): To reconcile two sets of changes to a repository.\n                      \n                      protocol\n                      \n                      A set of rules that define how one computer communicates with another. Common protocols on the Internet include HTTP and SSH.\n                      \n                      remote\n                      \n                      (of a repository) A version control repository connected to another, in such way that both can be kept in sync exchanging commits.\n                      \n                      repository\n                      \n                      A storage area where a version control system stores the full history of commits of a project and information about who changed what, when.\n                      \n                      resolve\n                      \n                      To eliminate the conflicts between two or more incompatible changes to a file or set of files being managed by a version control system.\n                      \n                      revision\n                      \n                      A synonym for commit.\n                      \n                      SHA-1\n                      \n                      SHA-1 hashes is what Git uses to compute identifiers, including for commits. To compute these, Git uses not only the actual change of a commit, but also its metadata (such as date, author, message), including the identifiers of all commits of preceding changes. This makes Git commit IDs virtually unique. I.e., the likelihood that two commits made independently, even of the same change, receive the same ID is exceedingly small.\n                      \n                      SSH\n                      \n                      The Secure Shell protocol used for secure communication between computers.\n                      \n                      timestamp\n                      \n                      A record of when a particular event occurred.\n                      \n                      version control\n                      \n                      A tool for managing changes to a set of files. Each set of changes creates a new commit of the files; the version control system allows users to recover old commits reliably, and helps manage conflicting changes made by different users."
  },
  {
    "objectID": "profiles/learner-profiles.html",
    "href": "profiles/learner-profiles.html",
    "title": "Git & GitHub Working Practices",
    "section": "",
    "text": "Skip to main content\n          \n            \n              \n                \n                                              \n            \n            \n              \n                \n                  \n                    \n                      \n                    \n                    \n                  \n                  \n                    \n                      \n                        \n                          \n                        \n                        Light\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Dark\n                        \n                          \n                        \n                      \n                    \n                    \n                      \n                        \n                          \n                        \n                        Auto\n                        \n                          \n                        \n                      \n                    \n                  \n                \n              \n              \n              \n                        \n                   Learner View \n                \n                \n                  Instructor View"
  },
  {
    "objectID": "profiles/learner-profiles.html#why-use-profiles",
    "href": "profiles/learner-profiles.html#why-use-profiles",
    "title": "Git & GitHub Working Practices",
    "section": "Why Use Profiles?",
    "text": "Why Use Profiles?\n                      Profiles are used to:\n                      \n                      promote empathy\n                      increase awareness and memorability of users\n                      prioritise features\n                      inform design decisions\n                      promote equality and diversity\n                      \n                      Profiles can be used to test whether the product or service meets the specific needs and expectations of key user groups."
  },
  {
    "objectID": "profiles/learner-profiles.html#profiles",
    "href": "profiles/learner-profiles.html#profiles",
    "title": "Git & GitHub Working Practices",
    "section": "Profiles",
    "text": "Profiles\n                      Amina is a researcher collaborating with the office to develop Jules. She uses fcm and svn because she has to. When the JULES docs moved to git/GitHub she tried to start learning git/GitHub to contribute to the docs but was unsure where to start and what courses to take. Amina and her colleagues frequently use the JASMIN computer and want to know how the new ways of working with Git and GitHub will apply to their use of JASMIN.\n                      Joshua is a scientific software engineer working on LFRic in the CCD team. He uses fcm mainly and doesn’t really touch svn. Joshua is comfortable using GitHub as some of his projects are already on GitHub. He has questions about working practices after the big codes have migrated. When working on the GitHub hosted LFRic documentation he uses the version control features of his IDE, PyCharm.\n                      Carlton is a scientific software engineer in Ocean Forecasting R&D. He is already thinking about the migration and supporting colleagues learning git basics. Carlton has a need for git/GitHub documentation and training, he is considering making his own. Carlton has questions about working practices after the big codes have migrated. He wants more bite sized and modular training on advanced Git/GitHub topics which could be delivered together in a days session for his team.\n                      Mina is a scientist working on JEDI related projects. Her team has already migrated most of their code to git/GitHub and is dual using fcm and git whilst migrating their last few repositories. Mina is learning about more advanced features of git/GitHub and exclusively uses the command line to interact with any JEDI git repositories. She would prefer to learn from short videos that she can access anytime.\n                      Alexis is a Science Manager. They manage a large team and several projects with technical and scientific documentation currently spread between trac pages, SharePoint, and OneNote. Alexis needs to work out how documentation will be migrated and would like to learn how to use GitHub to effectively manage her projects and team. They have also requested dedicated support for their team to help them migrate.\n                      Cora is an apprentice studying climate policy and has little to no experience with programming / computer science. She will be running various climate workflows and codes as part of Alexis’ team. Cora doesn’t know what version control is and would like to take an in person course and to have the materials available online so she can refer back anytime. She has been picking up bits of fcm as she starts her apprenticeship.\n                      Clarabella is a new starter to the office in Technology. They only know how to use git/GitHub but have had some very basic srs/fcm training. Clarabella needs to learn how we use GitHub at the Met Office and her manager suggested they find more advanced training on topics such as GitHub actions for their project. She’s proficient with Linux and has some experience with VSCode but not its version control features and extensions.\n                      Maxine is a scientist mainly working on climate policy. They use fcm once in a blue moon to contribute to small repos / scripts that they maintain. Maxine needs training on git/GitHub but is very bust so has little time to engage with training or the migration project. She would like a demonstration or walkthrough of how to migrate her repositories and scripts, preferably from an expert and in-person.\n                      Ziki is a prolific developer of core Met Office codes. He has limited experience of git/GitHub and needs to know how development processes will work when the code migrates to git/GitHub. Ziki has very little CPD time that could be used for training due to other science commitments. Ziki is nervous about making mistakes due to his time constraints and would like to know where to look to troubleshoot problems.\n                      Raven is a scientist working on the UM at a MOAP partner organisation. They only learn via written documentation with clear examples. Raven is currently working on several grant proposals and papers so has limited time to engage with us. Raven needs the benefits of migration emphasised and clear written documentation/training on how to use git/GitHub both in general and for the UM.\n                      Tatsuya is a PhD student working on a regional UM configuration. Their supervisor has asked them to get the UM model running on their HPC and doesn’t know where to start. They learnt git/GitHub at university but are unsure what our working practices are and where to look for help. Tatsuya hates learning through videos and would like to attend hand on support sessions to supplement any written documentation.\n                      Carmine is a scientist working at a MOAP partner institution in Oceania and does her data analysis primarily with R on Windows. They want to learn how to use Git and GitHub effectively on Windows with RStudio. They have very little experience with SVN and trac and no experience with Git and GitHub. She would like to understand more about version control and why it is important. They aren’t comfortable asking questions in a public forum so would like a private support channel to ask questions.\n                      Ceri works part time in programmes on climate related work. They are familiar with FCM and trac, having done some development of rose suites previously, but have only limited experience of Git and are not confident yet. They work fully remotely from Llanelli so require remote, direct instruction, during their work hours. They would also like a cheat sheet for Git/GitHub and clear step-by-step instructions on migration and new working practices with examples."
  }
]